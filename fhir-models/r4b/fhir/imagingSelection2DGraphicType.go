// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import (
	"encoding/json"
	"fmt"
	"strings"
)

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// ImagingSelection2DGraphicType is documented here http://hl7.org/fhir/ValueSet/imagingselection-2dgraphictype
type ImagingSelection2DGraphicType int

const (
	ImagingSelection2DGraphicTypePoint ImagingSelection2DGraphicType = iota
	ImagingSelection2DGraphicTypePolyline
	ImagingSelection2DGraphicTypeInterpolated
	ImagingSelection2DGraphicTypeCircle
	ImagingSelection2DGraphicTypeEllipse
)

func (code ImagingSelection2DGraphicType) MarshalJSON() ([]byte, error) {
	return json.Marshal(code.Code())
}
func (code *ImagingSelection2DGraphicType) UnmarshalJSON(json []byte) error {
	s := strings.Trim(string(json), "\"")
	switch s {
	case "point":
		*code = ImagingSelection2DGraphicTypePoint
	case "polyline":
		*code = ImagingSelection2DGraphicTypePolyline
	case "interpolated":
		*code = ImagingSelection2DGraphicTypeInterpolated
	case "circle":
		*code = ImagingSelection2DGraphicTypeCircle
	case "ellipse":
		*code = ImagingSelection2DGraphicTypeEllipse
	default:
		return fmt.Errorf("unknown ImagingSelection2DGraphicType code `%s`", s)
	}
	return nil
}
func (code ImagingSelection2DGraphicType) String() string {
	return code.Code()
}
func (code ImagingSelection2DGraphicType) Code() string {
	switch code {
	case ImagingSelection2DGraphicTypePoint:
		return "point"
	case ImagingSelection2DGraphicTypePolyline:
		return "polyline"
	case ImagingSelection2DGraphicTypeInterpolated:
		return "interpolated"
	case ImagingSelection2DGraphicTypeCircle:
		return "circle"
	case ImagingSelection2DGraphicTypeEllipse:
		return "ellipse"
	}
	return "<unknown>"
}
func (code ImagingSelection2DGraphicType) Display() string {
	switch code {
	case ImagingSelection2DGraphicTypePoint:
		return "POINT"
	case ImagingSelection2DGraphicTypePolyline:
		return "POLYLINE"
	case ImagingSelection2DGraphicTypeInterpolated:
		return "INTERPOLATED"
	case ImagingSelection2DGraphicTypeCircle:
		return "CIRCLE"
	case ImagingSelection2DGraphicTypeEllipse:
		return "ELLIPSE"
	}
	return "<unknown>"
}
func (code ImagingSelection2DGraphicType) Definition() string {
	switch code {
	case ImagingSelection2DGraphicTypePoint:
		return "A single location denoted by a single (x,y) pair."
	case ImagingSelection2DGraphicTypePolyline:
		return "A series of connected line segments with ordered vertices denoted by (x,y) triplets; the points need not be coplanar."
	case ImagingSelection2DGraphicTypeInterpolated:
		return "An n-tuple list of (x,y) pair end points between which some form of implementation dependent curved lines are to be drawn. The rendered line shall pass through all the specified points."
	case ImagingSelection2DGraphicTypeCircle:
		return "Two points shall be present; the first point is to be interpreted as the center and the second point as a point on the circumference of a circle, some form of implementation dependent representation of which is to be drawn."
	case ImagingSelection2DGraphicTypeEllipse:
		return "An ellipse defined by four (x,y) pairs, the first two pairs specifying the endpoints of the major axis and the second two pairs specifying the endpoints of the minor axis."
	}
	return "<unknown>"
}
