// Copyright 2024 Medical Center University Freiburg
// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/mcuf-idim/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// Permission is documented here http://hl7.org/fhir/StructureDefinition/Permission
type Permission struct {
	Id                *string                  `bson:"id,omitempty" json:"id,omitempty"`
	Meta              *Meta                    `bson:"meta,omitempty" json:"meta,omitempty"`
	ImplicitRules     *string                  `bson:"implicitRules,omitempty" json:"implicitRules,omitempty"`
	Language          *string                  `bson:"language,omitempty" json:"language,omitempty"`
	Text              *Narrative               `bson:"text,omitempty" json:"text,omitempty"`
	Contained         []json.RawMessage        `bson:"contained,omitempty" json:"contained,omitempty"`
	Extension         []Extension              `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension              `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Status            PermissionStatus         `bson:"status" json:"status"`
	Asserter          *Reference               `bson:"asserter,omitempty" json:"asserter,omitempty"`
	Date              []string                 `bson:"date,omitempty" json:"date,omitempty"`
	Validity          *Period                  `bson:"validity,omitempty" json:"validity,omitempty"`
	Justification     *PermissionJustification `bson:"justification,omitempty" json:"justification,omitempty"`
	Combining         PermissionRuleCombining  `bson:"combining" json:"combining"`
	Rule              []PermissionRule         `bson:"rule,omitempty" json:"rule,omitempty"`
}

func (r Permission) ContainedResources() []json.RawMessage {
	return r.Contained
}

type PermissionJustification struct {
	Id                *string           `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension       `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension       `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Basis             []CodeableConcept `bson:"basis,omitempty" json:"basis,omitempty"`
	Evidence          []Reference       `bson:"evidence,omitempty" json:"evidence,omitempty"`
}
type PermissionRule struct {
	Id                *string                  `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension              `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension              `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Type              *ConsentProvisionType    `bson:"type,omitempty" json:"type,omitempty"`
	Data              []PermissionRuleData     `bson:"data,omitempty" json:"data,omitempty"`
	Activity          []PermissionRuleActivity `bson:"activity,omitempty" json:"activity,omitempty"`
	Limit             []CodeableConcept        `bson:"limit,omitempty" json:"limit,omitempty"`
}
type PermissionRuleData struct {
	Id                *string                      `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension                  `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension                  `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Resource          []PermissionRuleDataResource `bson:"resource,omitempty" json:"resource,omitempty"`
	Security          []Coding                     `bson:"security,omitempty" json:"security,omitempty"`
	Period            []Period                     `bson:"period,omitempty" json:"period,omitempty"`
	Expression        *Expression                  `bson:"expression,omitempty" json:"expression,omitempty"`
}
type PermissionRuleDataResource struct {
	Id                *string            `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension        `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension        `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Meaning           ConsentDataMeaning `bson:"meaning" json:"meaning"`
	Reference         Reference          `bson:"reference" json:"reference"`
}
type PermissionRuleActivity struct {
	Id                *string           `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension       `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension       `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Actor             []Reference       `bson:"actor,omitempty" json:"actor,omitempty"`
	Action            []CodeableConcept `bson:"action,omitempty" json:"action,omitempty"`
	Purpose           []CodeableConcept `bson:"purpose,omitempty" json:"purpose,omitempty"`
}
type OtherPermission Permission

// MarshalJSON marshals the given Permission as JSON into a byte slice
func (r Permission) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherPermission
		ResourceType string `json:"resourceType"`
	}{
		OtherPermission: OtherPermission(r),
		ResourceType:    "Permission",
	})
}
func (r Permission) ResourceType() string {
	return "Permission"
}
func (r Permission) ResourceIdentifier() string {
	if r.Id != nil {
		return *r.Id
	}
	return ""
}

// UnmarshalPermission unmarshals a Permission.
func UnmarshalPermission(b []byte) (Permission, error) {
	var permission Permission
	if err := json.Unmarshal(b, &permission); err != nil {
		return permission, err
	}
	return permission, nil
}
