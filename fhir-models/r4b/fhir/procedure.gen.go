// Copyright 2024 Medical Center University Freiburg
// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/mcuf-idim/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// Procedure is documented here http://hl7.org/fhir/StructureDefinition/Procedure
type Procedure struct {
	Id                    *string                `bson:"id,omitempty" json:"id,omitempty"`
	Meta                  *Meta                  `bson:"meta,omitempty" json:"meta,omitempty"`
	ImplicitRules         *string                `bson:"implicitRules,omitempty" json:"implicitRules,omitempty"`
	Language              *string                `bson:"language,omitempty" json:"language,omitempty"`
	Text                  *Narrative             `bson:"text,omitempty" json:"text,omitempty"`
	Extension             []Extension            `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension     []Extension            `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Identifier            []Identifier           `bson:"identifier,omitempty" json:"identifier,omitempty"`
	InstantiatesCanonical []string               `bson:"instantiatesCanonical,omitempty" json:"instantiatesCanonical,omitempty"`
	InstantiatesUri       []string               `bson:"instantiatesUri,omitempty" json:"instantiatesUri,omitempty"`
	BasedOn               []Reference            `bson:"basedOn,omitempty" json:"basedOn,omitempty"`
	PartOf                []Reference            `bson:"partOf,omitempty" json:"partOf,omitempty"`
	Status                EventStatus            `bson:"status" json:"status"`
	StatusReason          *CodeableConcept       `bson:"statusReason,omitempty" json:"statusReason,omitempty"`
	Category              []CodeableConcept      `bson:"category,omitempty" json:"category,omitempty"`
	Code                  *CodeableConcept       `bson:"code,omitempty" json:"code,omitempty"`
	Subject               Reference              `bson:"subject" json:"subject"`
	Focus                 *Reference             `bson:"focus,omitempty" json:"focus,omitempty"`
	Encounter             *Reference             `bson:"encounter,omitempty" json:"encounter,omitempty"`
	OccurrenceDateTime    *string                `bson:"occurrenceDateTime,omitempty" json:"occurrenceDateTime,omitempty"`
	OccurrencePeriod      *Period                `bson:"occurrencePeriod,omitempty" json:"occurrencePeriod,omitempty"`
	OccurrenceString      *string                `bson:"occurrenceString,omitempty" json:"occurrenceString,omitempty"`
	OccurrenceAge         *Age                   `bson:"occurrenceAge,omitempty" json:"occurrenceAge,omitempty"`
	OccurrenceRange       *Range                 `bson:"occurrenceRange,omitempty" json:"occurrenceRange,omitempty"`
	OccurrenceTiming      *Timing                `bson:"occurrenceTiming,omitempty" json:"occurrenceTiming,omitempty"`
	Recorded              *string                `bson:"recorded,omitempty" json:"recorded,omitempty"`
	Recorder              *Reference             `bson:"recorder,omitempty" json:"recorder,omitempty"`
	ReportedBoolean       *bool                  `bson:"reportedBoolean,omitempty" json:"reportedBoolean,omitempty"`
	ReportedReference     *Reference             `bson:"reportedReference,omitempty" json:"reportedReference,omitempty"`
	Performer             []ProcedurePerformer   `bson:"performer,omitempty" json:"performer,omitempty"`
	Location              *Reference             `bson:"location,omitempty" json:"location,omitempty"`
	Reason                []CodeableReference    `bson:"reason,omitempty" json:"reason,omitempty"`
	BodySite              []CodeableConcept      `bson:"bodySite,omitempty" json:"bodySite,omitempty"`
	Outcome               *CodeableConcept       `bson:"outcome,omitempty" json:"outcome,omitempty"`
	Report                []Reference            `bson:"report,omitempty" json:"report,omitempty"`
	Complication          []CodeableReference    `bson:"complication,omitempty" json:"complication,omitempty"`
	FollowUp              []CodeableConcept      `bson:"followUp,omitempty" json:"followUp,omitempty"`
	Note                  []Annotation           `bson:"note,omitempty" json:"note,omitempty"`
	FocalDevice           []ProcedureFocalDevice `bson:"focalDevice,omitempty" json:"focalDevice,omitempty"`
	Used                  []CodeableReference    `bson:"used,omitempty" json:"used,omitempty"`
	SupportingInfo        []Reference            `bson:"supportingInfo,omitempty" json:"supportingInfo,omitempty"`
}
type ProcedurePerformer struct {
	Id                *string          `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension      `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension      `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Function          *CodeableConcept `bson:"function,omitempty" json:"function,omitempty"`
	Actor             Reference        `bson:"actor" json:"actor"`
	OnBehalfOf        *Reference       `bson:"onBehalfOf,omitempty" json:"onBehalfOf,omitempty"`
	Period            *Period          `bson:"period,omitempty" json:"period,omitempty"`
}
type ProcedureFocalDevice struct {
	Id                *string          `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension      `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension      `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Action            *CodeableConcept `bson:"action,omitempty" json:"action,omitempty"`
	Manipulated       Reference        `bson:"manipulated" json:"manipulated"`
}
type OtherProcedure Procedure

// MarshalJSON marshals the given Procedure as JSON into a byte slice
func (r Procedure) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherProcedure
		ResourceType string `json:"resourceType"`
	}{
		OtherProcedure: OtherProcedure(r),
		ResourceType:   "Procedure",
	})
}
func (r Procedure) ResourceType() string {
	return "Procedure"
}

// UnmarshalProcedure unmarshals a Procedure.
func UnmarshalProcedure(b []byte) (Procedure, error) {
	var procedure Procedure
	if err := json.Unmarshal(b, &procedure); err != nil {
		return procedure, err
	}
	return procedure, nil
}
