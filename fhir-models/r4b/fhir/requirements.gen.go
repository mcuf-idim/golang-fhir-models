// Copyright 2024 Medical Center University Freiburg
// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/mcuf-idim/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// Requirements is documented here http://hl7.org/fhir/StructureDefinition/Requirements
type Requirements struct {
	Id                     *string                 `bson:"id,omitempty" json:"id,omitempty"`
	Meta                   *Meta                   `bson:"meta,omitempty" json:"meta,omitempty"`
	ImplicitRules          *string                 `bson:"implicitRules,omitempty" json:"implicitRules,omitempty"`
	Language               *string                 `bson:"language,omitempty" json:"language,omitempty"`
	Text                   *Narrative              `bson:"text,omitempty" json:"text,omitempty"`
	Contained              []json.RawMessage       `bson:"contained,omitempty" json:"contained,omitempty"`
	Extension              []Extension             `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension      []Extension             `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Url                    *string                 `bson:"url,omitempty" json:"url,omitempty"`
	Identifier             []Identifier            `bson:"identifier,omitempty" json:"identifier,omitempty"`
	Version                *string                 `bson:"version,omitempty" json:"version,omitempty"`
	VersionAlgorithmString *string                 `bson:"versionAlgorithmString,omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding *Coding                 `bson:"versionAlgorithmCoding,omitempty" json:"versionAlgorithmCoding,omitempty"`
	Name                   *string                 `bson:"name,omitempty" json:"name,omitempty"`
	Title                  *string                 `bson:"title,omitempty" json:"title,omitempty"`
	Status                 PublicationStatus       `bson:"status" json:"status"`
	Experimental           *bool                   `bson:"experimental,omitempty" json:"experimental,omitempty"`
	Date                   *string                 `bson:"date,omitempty" json:"date,omitempty"`
	Publisher              *string                 `bson:"publisher,omitempty" json:"publisher,omitempty"`
	Contact                []ContactDetail         `bson:"contact,omitempty" json:"contact,omitempty"`
	Description            *string                 `bson:"description,omitempty" json:"description,omitempty"`
	UseContext             []UsageContext          `bson:"useContext,omitempty" json:"useContext,omitempty"`
	Jurisdiction           []CodeableConcept       `bson:"jurisdiction,omitempty" json:"jurisdiction,omitempty"`
	Purpose                *string                 `bson:"purpose,omitempty" json:"purpose,omitempty"`
	Copyright              *string                 `bson:"copyright,omitempty" json:"copyright,omitempty"`
	CopyrightLabel         *string                 `bson:"copyrightLabel,omitempty" json:"copyrightLabel,omitempty"`
	DerivedFrom            []string                `bson:"derivedFrom,omitempty" json:"derivedFrom,omitempty"`
	Reference              []string                `bson:"reference,omitempty" json:"reference,omitempty"`
	Actor                  []string                `bson:"actor,omitempty" json:"actor,omitempty"`
	Statement              []RequirementsStatement `bson:"statement,omitempty" json:"statement,omitempty"`
}

func (r Requirements) ContainedResources() []json.RawMessage {
	return r.Contained
}

type RequirementsStatement struct {
	Id                *string                  `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension              `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension              `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Key               string                   `bson:"key" json:"key"`
	Label             *string                  `bson:"label,omitempty" json:"label,omitempty"`
	Conformance       []ConformanceExpectation `bson:"conformance,omitempty" json:"conformance,omitempty"`
	Conditionality    *bool                    `bson:"conditionality,omitempty" json:"conditionality,omitempty"`
	Requirement       string                   `bson:"requirement" json:"requirement"`
	DerivedFrom       *string                  `bson:"derivedFrom,omitempty" json:"derivedFrom,omitempty"`
	Parent            *string                  `bson:"parent,omitempty" json:"parent,omitempty"`
	SatisfiedBy       []string                 `bson:"satisfiedBy,omitempty" json:"satisfiedBy,omitempty"`
	Reference         []string                 `bson:"reference,omitempty" json:"reference,omitempty"`
	Source            []Reference              `bson:"source,omitempty" json:"source,omitempty"`
}
type OtherRequirements Requirements

// MarshalJSON marshals the given Requirements as JSON into a byte slice
func (r Requirements) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherRequirements
		ResourceType string `json:"resourceType"`
	}{
		OtherRequirements: OtherRequirements(r),
		ResourceType:      "Requirements",
	})
}
func (r Requirements) ResourceType() string {
	return "Requirements"
}
func (r Requirements) ResourceIdentifier() string {
	if r.Id != nil {
		return *r.Id
	}
	return ""
}

// UnmarshalRequirements unmarshals a Requirements.
func UnmarshalRequirements(b []byte) (Requirements, error) {
	var requirements Requirements
	if err := json.Unmarshal(b, &requirements); err != nil {
		return requirements, err
	}
	return requirements, nil
}
