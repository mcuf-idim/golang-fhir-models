// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// ClinicalUseDefinition is documented here http://hl7.org/fhir/StructureDefinition/ClinicalUseDefinition
type ClinicalUseDefinition struct {
	Id                *string                                 `bson:"id,omitempty" json:"id,omitempty"`
	Meta              *Meta                                   `bson:"meta,omitempty" json:"meta,omitempty"`
	ImplicitRules     *string                                 `bson:"implicitRules,omitempty" json:"implicitRules,omitempty"`
	Language          *string                                 `bson:"language,omitempty" json:"language,omitempty"`
	Text              *Narrative                              `bson:"text,omitempty" json:"text,omitempty"`
	Extension         []Extension                             `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension                             `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Identifier        []Identifier                            `bson:"identifier,omitempty" json:"identifier,omitempty"`
	Type              ClinicalUseDefinitionType               `bson:"type" json:"type"`
	Category          []CodeableConcept                       `bson:"category,omitempty" json:"category,omitempty"`
	Subject           []Reference                             `bson:"subject,omitempty" json:"subject,omitempty"`
	Status            *CodeableConcept                        `bson:"status,omitempty" json:"status,omitempty"`
	Contraindication  *ClinicalUseDefinitionContraindication  `bson:"contraindication,omitempty" json:"contraindication,omitempty"`
	Indication        *ClinicalUseDefinitionIndication        `bson:"indication,omitempty" json:"indication,omitempty"`
	Interaction       *ClinicalUseDefinitionInteraction       `bson:"interaction,omitempty" json:"interaction,omitempty"`
	Population        []Reference                             `bson:"population,omitempty" json:"population,omitempty"`
	Library           []string                                `bson:"library,omitempty" json:"library,omitempty"`
	UndesirableEffect *ClinicalUseDefinitionUndesirableEffect `bson:"undesirableEffect,omitempty" json:"undesirableEffect,omitempty"`
	Warning           *ClinicalUseDefinitionWarning           `bson:"warning,omitempty" json:"warning,omitempty"`
}
type ClinicalUseDefinitionContraindication struct {
	Id                      *string                                             `bson:"id,omitempty" json:"id,omitempty"`
	Extension               []Extension                                         `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension       []Extension                                         `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	DiseaseSymptomProcedure *CodeableReference                                  `bson:"diseaseSymptomProcedure,omitempty" json:"diseaseSymptomProcedure,omitempty"`
	DiseaseStatus           *CodeableReference                                  `bson:"diseaseStatus,omitempty" json:"diseaseStatus,omitempty"`
	Comorbidity             []CodeableReference                                 `bson:"comorbidity,omitempty" json:"comorbidity,omitempty"`
	Indication              []Reference                                         `bson:"indication,omitempty" json:"indication,omitempty"`
	Applicability           *Expression                                         `bson:"applicability,omitempty" json:"applicability,omitempty"`
	OtherTherapy            []ClinicalUseDefinitionContraindicationOtherTherapy `bson:"otherTherapy,omitempty" json:"otherTherapy,omitempty"`
}
type ClinicalUseDefinitionContraindicationOtherTherapy struct {
	Id                *string           `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension       `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension       `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	RelationshipType  CodeableConcept   `bson:"relationshipType" json:"relationshipType"`
	Treatment         CodeableReference `bson:"treatment" json:"treatment"`
}
type ClinicalUseDefinitionIndication struct {
	Id                      *string                                             `bson:"id,omitempty" json:"id,omitempty"`
	Extension               []Extension                                         `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension       []Extension                                         `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	DiseaseSymptomProcedure *CodeableReference                                  `bson:"diseaseSymptomProcedure,omitempty" json:"diseaseSymptomProcedure,omitempty"`
	DiseaseStatus           *CodeableReference                                  `bson:"diseaseStatus,omitempty" json:"diseaseStatus,omitempty"`
	Comorbidity             []CodeableReference                                 `bson:"comorbidity,omitempty" json:"comorbidity,omitempty"`
	IntendedEffect          *CodeableReference                                  `bson:"intendedEffect,omitempty" json:"intendedEffect,omitempty"`
	DurationRange           *Range                                              `bson:"durationRange,omitempty" json:"durationRange,omitempty"`
	DurationString          *string                                             `bson:"durationString,omitempty" json:"durationString,omitempty"`
	UndesirableEffect       []Reference                                         `bson:"undesirableEffect,omitempty" json:"undesirableEffect,omitempty"`
	Applicability           *Expression                                         `bson:"applicability,omitempty" json:"applicability,omitempty"`
	OtherTherapy            []ClinicalUseDefinitionContraindicationOtherTherapy `bson:"otherTherapy,omitempty" json:"otherTherapy,omitempty"`
}
type ClinicalUseDefinitionInteraction struct {
	Id                *string                                       `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension                                   `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension                                   `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Interactant       []ClinicalUseDefinitionInteractionInteractant `bson:"interactant,omitempty" json:"interactant,omitempty"`
	Type              *CodeableConcept                              `bson:"type,omitempty" json:"type,omitempty"`
	Effect            *CodeableReference                            `bson:"effect,omitempty" json:"effect,omitempty"`
	Incidence         *CodeableConcept                              `bson:"incidence,omitempty" json:"incidence,omitempty"`
	Management        []CodeableConcept                             `bson:"management,omitempty" json:"management,omitempty"`
}
type ClinicalUseDefinitionInteractionInteractant struct {
	Id                  *string         `bson:"id,omitempty" json:"id,omitempty"`
	Extension           []Extension     `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension   []Extension     `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	ItemReference       Reference       `bson:"itemReference" json:"itemReference"`
	ItemCodeableConcept CodeableConcept `bson:"itemCodeableConcept" json:"itemCodeableConcept"`
}
type ClinicalUseDefinitionUndesirableEffect struct {
	Id                     *string            `bson:"id,omitempty" json:"id,omitempty"`
	Extension              []Extension        `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension      []Extension        `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	SymptomConditionEffect *CodeableReference `bson:"symptomConditionEffect,omitempty" json:"symptomConditionEffect,omitempty"`
	Classification         *CodeableConcept   `bson:"classification,omitempty" json:"classification,omitempty"`
	FrequencyOfOccurrence  *CodeableConcept   `bson:"frequencyOfOccurrence,omitempty" json:"frequencyOfOccurrence,omitempty"`
}
type ClinicalUseDefinitionWarning struct {
	Id                *string          `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension      `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension      `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Description       *string          `bson:"description,omitempty" json:"description,omitempty"`
	Code              *CodeableConcept `bson:"code,omitempty" json:"code,omitempty"`
}
type OtherClinicalUseDefinition ClinicalUseDefinition

// MarshalJSON marshals the given ClinicalUseDefinition as JSON into a byte slice
func (r ClinicalUseDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherClinicalUseDefinition
		ResourceType string `json:"resourceType"`
	}{
		OtherClinicalUseDefinition: OtherClinicalUseDefinition(r),
		ResourceType:               "ClinicalUseDefinition",
	})
}

// UnmarshalClinicalUseDefinition unmarshals a ClinicalUseDefinition.
func UnmarshalClinicalUseDefinition(b []byte) (ClinicalUseDefinition, error) {
	var clinicalUseDefinition ClinicalUseDefinition
	if err := json.Unmarshal(b, &clinicalUseDefinition); err != nil {
		return clinicalUseDefinition, err
	}
	return clinicalUseDefinition, nil
}
