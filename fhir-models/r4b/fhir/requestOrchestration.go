// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// RequestOrchestration is documented here http://hl7.org/fhir/StructureDefinition/RequestOrchestration
type RequestOrchestration struct {
	Id                    *string                      `bson:"id,omitempty" json:"id,omitempty"`
	Meta                  *Meta                        `bson:"meta,omitempty" json:"meta,omitempty"`
	ImplicitRules         *string                      `bson:"implicitRules,omitempty" json:"implicitRules,omitempty"`
	Language              *string                      `bson:"language,omitempty" json:"language,omitempty"`
	Text                  *Narrative                   `bson:"text,omitempty" json:"text,omitempty"`
	Extension             []Extension                  `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension     []Extension                  `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Identifier            []Identifier                 `bson:"identifier,omitempty" json:"identifier,omitempty"`
	InstantiatesCanonical []string                     `bson:"instantiatesCanonical,omitempty" json:"instantiatesCanonical,omitempty"`
	InstantiatesUri       []string                     `bson:"instantiatesUri,omitempty" json:"instantiatesUri,omitempty"`
	BasedOn               []Reference                  `bson:"basedOn,omitempty" json:"basedOn,omitempty"`
	Replaces              []Reference                  `bson:"replaces,omitempty" json:"replaces,omitempty"`
	GroupIdentifier       *Identifier                  `bson:"groupIdentifier,omitempty" json:"groupIdentifier,omitempty"`
	Status                RequestStatus                `bson:"status" json:"status"`
	Intent                RequestIntent                `bson:"intent" json:"intent"`
	Priority              *RequestPriority             `bson:"priority,omitempty" json:"priority,omitempty"`
	Code                  *CodeableConcept             `bson:"code,omitempty" json:"code,omitempty"`
	Subject               *Reference                   `bson:"subject,omitempty" json:"subject,omitempty"`
	Encounter             *Reference                   `bson:"encounter,omitempty" json:"encounter,omitempty"`
	AuthoredOn            *string                      `bson:"authoredOn,omitempty" json:"authoredOn,omitempty"`
	Author                *Reference                   `bson:"author,omitempty" json:"author,omitempty"`
	Reason                []CodeableReference          `bson:"reason,omitempty" json:"reason,omitempty"`
	Goal                  []Reference                  `bson:"goal,omitempty" json:"goal,omitempty"`
	Note                  []Annotation                 `bson:"note,omitempty" json:"note,omitempty"`
	Action                []RequestOrchestrationAction `bson:"action,omitempty" json:"action,omitempty"`
}
type RequestOrchestrationAction struct {
	Id                  *string                                   `bson:"id,omitempty" json:"id,omitempty"`
	Extension           []Extension                               `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension   []Extension                               `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	LinkId              *string                                   `bson:"linkId,omitempty" json:"linkId,omitempty"`
	Prefix              *string                                   `bson:"prefix,omitempty" json:"prefix,omitempty"`
	Title               *string                                   `bson:"title,omitempty" json:"title,omitempty"`
	Description         *string                                   `bson:"description,omitempty" json:"description,omitempty"`
	TextEquivalent      *string                                   `bson:"textEquivalent,omitempty" json:"textEquivalent,omitempty"`
	Priority            *RequestPriority                          `bson:"priority,omitempty" json:"priority,omitempty"`
	Code                []CodeableConcept                         `bson:"code,omitempty" json:"code,omitempty"`
	Documentation       []RelatedArtifact                         `bson:"documentation,omitempty" json:"documentation,omitempty"`
	Goal                []Reference                               `bson:"goal,omitempty" json:"goal,omitempty"`
	Condition           []RequestOrchestrationActionCondition     `bson:"condition,omitempty" json:"condition,omitempty"`
	Input               []RequestOrchestrationActionInput         `bson:"input,omitempty" json:"input,omitempty"`
	Output              []RequestOrchestrationActionOutput        `bson:"output,omitempty" json:"output,omitempty"`
	RelatedAction       []RequestOrchestrationActionRelatedAction `bson:"relatedAction,omitempty" json:"relatedAction,omitempty"`
	TimingDateTime      *string                                   `bson:"timingDateTime,omitempty" json:"timingDateTime,omitempty"`
	TimingAge           *Age                                      `bson:"timingAge,omitempty" json:"timingAge,omitempty"`
	TimingPeriod        *Period                                   `bson:"timingPeriod,omitempty" json:"timingPeriod,omitempty"`
	TimingDuration      *Duration                                 `bson:"timingDuration,omitempty" json:"timingDuration,omitempty"`
	TimingRange         *Range                                    `bson:"timingRange,omitempty" json:"timingRange,omitempty"`
	TimingTiming        *Timing                                   `bson:"timingTiming,omitempty" json:"timingTiming,omitempty"`
	Location            *CodeableReference                        `bson:"location,omitempty" json:"location,omitempty"`
	Participant         []RequestOrchestrationActionParticipant   `bson:"participant,omitempty" json:"participant,omitempty"`
	Type                *CodeableConcept                          `bson:"type,omitempty" json:"type,omitempty"`
	GroupingBehavior    *ActionGroupingBehavior                   `bson:"groupingBehavior,omitempty" json:"groupingBehavior,omitempty"`
	SelectionBehavior   *ActionSelectionBehavior                  `bson:"selectionBehavior,omitempty" json:"selectionBehavior,omitempty"`
	RequiredBehavior    *ActionRequiredBehavior                   `bson:"requiredBehavior,omitempty" json:"requiredBehavior,omitempty"`
	PrecheckBehavior    *ActionPrecheckBehavior                   `bson:"precheckBehavior,omitempty" json:"precheckBehavior,omitempty"`
	CardinalityBehavior *ActionCardinalityBehavior                `bson:"cardinalityBehavior,omitempty" json:"cardinalityBehavior,omitempty"`
	Resource            *Reference                                `bson:"resource,omitempty" json:"resource,omitempty"`
	DefinitionCanonical *string                                   `bson:"definitionCanonical,omitempty" json:"definitionCanonical,omitempty"`
	DefinitionUri       *string                                   `bson:"definitionUri,omitempty" json:"definitionUri,omitempty"`
	Transform           *string                                   `bson:"transform,omitempty" json:"transform,omitempty"`
	DynamicValue        []RequestOrchestrationActionDynamicValue  `bson:"dynamicValue,omitempty" json:"dynamicValue,omitempty"`
	Action              []RequestOrchestrationAction              `bson:"action,omitempty" json:"action,omitempty"`
}
type RequestOrchestrationActionCondition struct {
	Id                *string             `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension         `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension         `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Kind              ActionConditionKind `bson:"kind" json:"kind"`
	Expression        *Expression         `bson:"expression,omitempty" json:"expression,omitempty"`
}
type RequestOrchestrationActionInput struct {
	Id                *string          `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension      `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension      `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Title             *string          `bson:"title,omitempty" json:"title,omitempty"`
	Requirement       *DataRequirement `bson:"requirement,omitempty" json:"requirement,omitempty"`
	RelatedData       *string          `bson:"relatedData,omitempty" json:"relatedData,omitempty"`
}
type RequestOrchestrationActionOutput struct {
	Id                *string          `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension      `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension      `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Title             *string          `bson:"title,omitempty" json:"title,omitempty"`
	Requirement       *DataRequirement `bson:"requirement,omitempty" json:"requirement,omitempty"`
	RelatedData       *string          `bson:"relatedData,omitempty" json:"relatedData,omitempty"`
}
type RequestOrchestrationActionRelatedAction struct {
	Id                *string                 `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension             `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension             `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	TargetId          string                  `bson:"targetId" json:"targetId"`
	Relationship      ActionRelationshipType  `bson:"relationship" json:"relationship"`
	EndRelationship   *ActionRelationshipType `bson:"endRelationship,omitempty" json:"endRelationship,omitempty"`
	OffsetDuration    *Duration               `bson:"offsetDuration,omitempty" json:"offsetDuration,omitempty"`
	OffsetRange       *Range                  `bson:"offsetRange,omitempty" json:"offsetRange,omitempty"`
}
type RequestOrchestrationActionParticipant struct {
	Id                *string                `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension            `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension            `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Type              *ActionParticipantType `bson:"type,omitempty" json:"type,omitempty"`
	TypeCanonical     *string                `bson:"typeCanonical,omitempty" json:"typeCanonical,omitempty"`
	TypeReference     *Reference             `bson:"typeReference,omitempty" json:"typeReference,omitempty"`
	Role              *CodeableConcept       `bson:"role,omitempty" json:"role,omitempty"`
	Function          *CodeableConcept       `bson:"function,omitempty" json:"function,omitempty"`
	ActorCanonical    *string                `bson:"actorCanonical,omitempty" json:"actorCanonical,omitempty"`
	ActorReference    *Reference             `bson:"actorReference,omitempty" json:"actorReference,omitempty"`
}
type RequestOrchestrationActionDynamicValue struct {
	Id                *string     `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Path              *string     `bson:"path,omitempty" json:"path,omitempty"`
	Expression        *Expression `bson:"expression,omitempty" json:"expression,omitempty"`
}
type OtherRequestOrchestration RequestOrchestration

// MarshalJSON marshals the given RequestOrchestration as JSON into a byte slice
func (r RequestOrchestration) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherRequestOrchestration
		ResourceType string `json:"resourceType"`
	}{
		OtherRequestOrchestration: OtherRequestOrchestration(r),
		ResourceType:              "RequestOrchestration",
	})
}

// UnmarshalRequestOrchestration unmarshals a RequestOrchestration.
func UnmarshalRequestOrchestration(b []byte) (RequestOrchestration, error) {
	var requestOrchestration RequestOrchestration
	if err := json.Unmarshal(b, &requestOrchestration); err != nil {
		return requestOrchestration, err
	}
	return requestOrchestration, nil
}
