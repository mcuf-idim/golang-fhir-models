// Copyright 2024 Medical Center University Freiburg
// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/mcuf-idim/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// Subscription is documented here http://hl7.org/fhir/StructureDefinition/Subscription
type Subscription struct {
	Id                *string                     `bson:"id,omitempty" json:"id,omitempty"`
	Meta              *Meta                       `bson:"meta,omitempty" json:"meta,omitempty"`
	ImplicitRules     *string                     `bson:"implicitRules,omitempty" json:"implicitRules,omitempty"`
	Language          *string                     `bson:"language,omitempty" json:"language,omitempty"`
	Text              *Narrative                  `bson:"text,omitempty" json:"text,omitempty"`
	Extension         []Extension                 `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension                 `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Identifier        []Identifier                `bson:"identifier,omitempty" json:"identifier,omitempty"`
	Name              *string                     `bson:"name,omitempty" json:"name,omitempty"`
	Status            SubscriptionStatusCodes     `bson:"status" json:"status"`
	Topic             string                      `bson:"topic" json:"topic"`
	Contact           []ContactPoint              `bson:"contact,omitempty" json:"contact,omitempty"`
	End               *string                     `bson:"end,omitempty" json:"end,omitempty"`
	ManagingEntity    *Reference                  `bson:"managingEntity,omitempty" json:"managingEntity,omitempty"`
	Reason            *string                     `bson:"reason,omitempty" json:"reason,omitempty"`
	FilterBy          []SubscriptionFilterBy      `bson:"filterBy,omitempty" json:"filterBy,omitempty"`
	ChannelType       Coding                      `bson:"channelType" json:"channelType"`
	Endpoint          *string                     `bson:"endpoint,omitempty" json:"endpoint,omitempty"`
	Parameter         []SubscriptionParameter     `bson:"parameter,omitempty" json:"parameter,omitempty"`
	HeartbeatPeriod   *int                        `bson:"heartbeatPeriod,omitempty" json:"heartbeatPeriod,omitempty"`
	Timeout           *int                        `bson:"timeout,omitempty" json:"timeout,omitempty"`
	ContentType       *string                     `bson:"contentType,omitempty" json:"contentType,omitempty"`
	Content           *SubscriptionPayloadContent `bson:"content,omitempty" json:"content,omitempty"`
	MaxCount          *int                        `bson:"maxCount,omitempty" json:"maxCount,omitempty"`
}
type SubscriptionFilterBy struct {
	Id                *string             `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension         `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension         `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	ResourceType      *string             `bson:"resourceType,omitempty" json:"resourceType,omitempty"`
	FilterParameter   string              `bson:"filterParameter" json:"filterParameter"`
	Comparator        *SearchComparator   `bson:"comparator,omitempty" json:"comparator,omitempty"`
	Modifier          *SearchModifierCode `bson:"modifier,omitempty" json:"modifier,omitempty"`
	Value             string              `bson:"value" json:"value"`
}
type SubscriptionParameter struct {
	Id                *string     `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Name              string      `bson:"name" json:"name"`
	Value             string      `bson:"value" json:"value"`
}
type OtherSubscription Subscription

// MarshalJSON marshals the given Subscription as JSON into a byte slice
func (r Subscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherSubscription
		ResourceType string `json:"resourceType"`
	}{
		OtherSubscription: OtherSubscription(r),
		ResourceType:      "Subscription",
	})
}
func (r Subscription) ResourceType() string {
	return "Subscription"
}

// UnmarshalSubscription unmarshals a Subscription.
func UnmarshalSubscription(b []byte) (Subscription, error) {
	var subscription Subscription
	if err := json.Unmarshal(b, &subscription); err != nil {
		return subscription, err
	}
	return subscription, nil
}
