// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import (
	"encoding/json"
	"fmt"
	"strings"
)

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// ConceptMapPropertyType is documented here http://hl7.org/fhir/ValueSet/conceptmap-property-type
type ConceptMapPropertyType int

const (
	ConceptMapPropertyTypeCoding ConceptMapPropertyType = iota
	ConceptMapPropertyTypeString
	ConceptMapPropertyTypeInteger
	ConceptMapPropertyTypeBoolean
	ConceptMapPropertyTypeDateTime
	ConceptMapPropertyTypeDecimal
	ConceptMapPropertyTypeCode
)

func (code ConceptMapPropertyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(code.Code())
}
func (code *ConceptMapPropertyType) UnmarshalJSON(json []byte) error {
	s := strings.Trim(string(json), "\"")
	switch s {
	case "Coding":
		*code = ConceptMapPropertyTypeCoding
	case "string":
		*code = ConceptMapPropertyTypeString
	case "integer":
		*code = ConceptMapPropertyTypeInteger
	case "boolean":
		*code = ConceptMapPropertyTypeBoolean
	case "dateTime":
		*code = ConceptMapPropertyTypeDateTime
	case "decimal":
		*code = ConceptMapPropertyTypeDecimal
	case "code":
		*code = ConceptMapPropertyTypeCode
	default:
		return fmt.Errorf("unknown ConceptMapPropertyType code `%s`", s)
	}
	return nil
}
func (code ConceptMapPropertyType) String() string {
	return code.Code()
}
func (code ConceptMapPropertyType) Code() string {
	switch code {
	case ConceptMapPropertyTypeCoding:
		return "Coding"
	case ConceptMapPropertyTypeString:
		return "string"
	case ConceptMapPropertyTypeInteger:
		return "integer"
	case ConceptMapPropertyTypeBoolean:
		return "boolean"
	case ConceptMapPropertyTypeDateTime:
		return "dateTime"
	case ConceptMapPropertyTypeDecimal:
		return "decimal"
	case ConceptMapPropertyTypeCode:
		return "code"
	}
	return "<unknown>"
}
func (code ConceptMapPropertyType) Display() string {
	switch code {
	case ConceptMapPropertyTypeCoding:
		return "Coding (external reference)"
	case ConceptMapPropertyTypeString:
		return "string"
	case ConceptMapPropertyTypeInteger:
		return "integer"
	case ConceptMapPropertyTypeBoolean:
		return "boolean"
	case ConceptMapPropertyTypeDateTime:
		return "dateTime"
	case ConceptMapPropertyTypeDecimal:
		return "decimal"
	case ConceptMapPropertyTypeCode:
		return "code"
	}
	return "<unknown>"
}
func (code ConceptMapPropertyType) Definition() string {
	switch code {
	case ConceptMapPropertyTypeCoding:
		return "The property  value is a code defined in an external code system. This may be used for translations, but is not the intent."
	case ConceptMapPropertyTypeString:
		return "The property value is a string."
	case ConceptMapPropertyTypeInteger:
		return "The property value is an integer (often used to assign ranking values to concepts for supporting score assessments)."
	case ConceptMapPropertyTypeBoolean:
		return "The property value is a boolean true | false."
	case ConceptMapPropertyTypeDateTime:
		return "The property is a date or a date + time."
	case ConceptMapPropertyTypeDecimal:
		return "The property value is a decimal number."
	case ConceptMapPropertyTypeCode:
		return "The property value is a code as defined in the CodeSystem in ConceptMap.property.system."
	}
	return "<unknown>"
}
