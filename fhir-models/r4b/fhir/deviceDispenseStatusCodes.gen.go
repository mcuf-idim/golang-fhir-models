// Copyright 2024 Medical Center University Freiburg
// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import (
	"encoding/json"
	"fmt"
	"strings"
)

// THIS FILE IS GENERATED BY https://github.com/mcuf-idim/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// DeviceDispenseStatusCodes is documented here http://hl7.org/fhir/ValueSet/devicedispense-status
type DeviceDispenseStatusCodes int

const (
	DeviceDispenseStatusCodesPreparation DeviceDispenseStatusCodes = iota
	DeviceDispenseStatusCodesInProgress
	DeviceDispenseStatusCodesCancelled
	DeviceDispenseStatusCodesOnHold
	DeviceDispenseStatusCodesCompleted
	DeviceDispenseStatusCodesEnteredInError
	DeviceDispenseStatusCodesStopped
	DeviceDispenseStatusCodesDeclined
	DeviceDispenseStatusCodesUnknown
)

func (code DeviceDispenseStatusCodes) MarshalJSON() ([]byte, error) {
	return json.Marshal(code.Code())
}
func (code *DeviceDispenseStatusCodes) UnmarshalJSON(json []byte) error {
	s := strings.Trim(string(json), "\"")
	switch s {
	case "preparation":
		*code = DeviceDispenseStatusCodesPreparation
	case "in-progress":
		*code = DeviceDispenseStatusCodesInProgress
	case "cancelled":
		*code = DeviceDispenseStatusCodesCancelled
	case "on-hold":
		*code = DeviceDispenseStatusCodesOnHold
	case "completed":
		*code = DeviceDispenseStatusCodesCompleted
	case "entered-in-error":
		*code = DeviceDispenseStatusCodesEnteredInError
	case "stopped":
		*code = DeviceDispenseStatusCodesStopped
	case "declined":
		*code = DeviceDispenseStatusCodesDeclined
	case "unknown":
		*code = DeviceDispenseStatusCodesUnknown
	default:
		return fmt.Errorf("unknown DeviceDispenseStatusCodes code `%s`", s)
	}
	return nil
}
func (code DeviceDispenseStatusCodes) String() string {
	return code.Code()
}
func (code DeviceDispenseStatusCodes) Code() string {
	switch code {
	case DeviceDispenseStatusCodesPreparation:
		return "preparation"
	case DeviceDispenseStatusCodesInProgress:
		return "in-progress"
	case DeviceDispenseStatusCodesCancelled:
		return "cancelled"
	case DeviceDispenseStatusCodesOnHold:
		return "on-hold"
	case DeviceDispenseStatusCodesCompleted:
		return "completed"
	case DeviceDispenseStatusCodesEnteredInError:
		return "entered-in-error"
	case DeviceDispenseStatusCodesStopped:
		return "stopped"
	case DeviceDispenseStatusCodesDeclined:
		return "declined"
	case DeviceDispenseStatusCodesUnknown:
		return "unknown"
	}
	return "<unknown>"
}
func (code DeviceDispenseStatusCodes) Display() string {
	switch code {
	case DeviceDispenseStatusCodesPreparation:
		return "Preparation"
	case DeviceDispenseStatusCodesInProgress:
		return "In Progress"
	case DeviceDispenseStatusCodesCancelled:
		return "Cancelled"
	case DeviceDispenseStatusCodesOnHold:
		return "On Hold"
	case DeviceDispenseStatusCodesCompleted:
		return "Completed"
	case DeviceDispenseStatusCodesEnteredInError:
		return "Entered in Error"
	case DeviceDispenseStatusCodesStopped:
		return "Stopped"
	case DeviceDispenseStatusCodesDeclined:
		return "Declined"
	case DeviceDispenseStatusCodesUnknown:
		return "Unknown"
	}
	return "<unknown>"
}
func (code DeviceDispenseStatusCodes) Definition() string {
	switch code {
	case DeviceDispenseStatusCodesPreparation:
		return "The core event has not started yet, but some staging activities have begun (e.g. initial preparing of the device. Preparation stages may be tracked e.g. for planning, supply or billing purposes."
	case DeviceDispenseStatusCodesInProgress:
		return "The dispensed product is ready for pickup."
	case DeviceDispenseStatusCodesCancelled:
		return "The dispensed product was not and will never be picked up by the patient."
	case DeviceDispenseStatusCodesOnHold:
		return "The dispense process is paused while waiting for an external event to reactivate the dispense.  For example, new stock has arrived or the prescriber has called."
	case DeviceDispenseStatusCodesCompleted:
		return "The dispensed product has been picked up."
	case DeviceDispenseStatusCodesEnteredInError:
		return "The dispense was entered in error and therefore nullified."
	case DeviceDispenseStatusCodesStopped:
		return "Actions implied by the dispense have been permanently halted, before all of them occurred."
	case DeviceDispenseStatusCodesDeclined:
		return "The dispense was declined and not performed."
	case DeviceDispenseStatusCodesUnknown:
		return "The authoring system does not know which of the status values applies for this dispense.  Note: this concept is not to be used for other - one of the listed statuses is presumed to apply, it's just now known which one."
	}
	return "<unknown>"
}
