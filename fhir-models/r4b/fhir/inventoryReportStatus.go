// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import (
	"encoding/json"
	"fmt"
	"strings"
)

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// InventoryReportStatus is documented here http://hl7.org/fhir/ValueSet/inventoryreport-status
type InventoryReportStatus int

const (
	InventoryReportStatusDraft InventoryReportStatus = iota
	InventoryReportStatusRequested
	InventoryReportStatusActive
	InventoryReportStatusEnteredInError
)

func (code InventoryReportStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(code.Code())
}
func (code *InventoryReportStatus) UnmarshalJSON(json []byte) error {
	s := strings.Trim(string(json), "\"")
	switch s {
	case "draft":
		*code = InventoryReportStatusDraft
	case "requested":
		*code = InventoryReportStatusRequested
	case "active":
		*code = InventoryReportStatusActive
	case "entered-in-error":
		*code = InventoryReportStatusEnteredInError
	default:
		return fmt.Errorf("unknown InventoryReportStatus code `%s`", s)
	}
	return nil
}
func (code InventoryReportStatus) String() string {
	return code.Code()
}
func (code InventoryReportStatus) Code() string {
	switch code {
	case InventoryReportStatusDraft:
		return "draft"
	case InventoryReportStatusRequested:
		return "requested"
	case InventoryReportStatusActive:
		return "active"
	case InventoryReportStatusEnteredInError:
		return "entered-in-error"
	}
	return "<unknown>"
}
func (code InventoryReportStatus) Display() string {
	switch code {
	case InventoryReportStatusDraft:
		return "Draft"
	case InventoryReportStatusRequested:
		return "Requested"
	case InventoryReportStatusActive:
		return "Active"
	case InventoryReportStatusEnteredInError:
		return "Entered in Error"
	}
	return "<unknown>"
}
func (code InventoryReportStatus) Definition() string {
	switch code {
	case InventoryReportStatusDraft:
		return "The existence of the report is registered, but it is still without content or only some preliminary content."
	case InventoryReportStatusRequested:
		return "The inventory report has been requested but there is no data available."
	case InventoryReportStatusActive:
		return "This report is submitted as current."
	case InventoryReportStatusEnteredInError:
		return "The report has been withdrawn following a previous final release.  This electronic record should never have existed, though it is possible that real-world decisions were based on it."
	}
	return "<unknown>"
}
