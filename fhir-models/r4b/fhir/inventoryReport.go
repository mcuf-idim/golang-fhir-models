// Copyright 2024 Medical Center University Freiburg
// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/mcuf-idim/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// InventoryReport is documented here http://hl7.org/fhir/StructureDefinition/InventoryReport
type InventoryReport struct {
	Id                  *string                           `bson:"id,omitempty" json:"id,omitempty"`
	Meta                *Meta                             `bson:"meta,omitempty" json:"meta,omitempty"`
	ImplicitRules       *string                           `bson:"implicitRules,omitempty" json:"implicitRules,omitempty"`
	Language            *string                           `bson:"language,omitempty" json:"language,omitempty"`
	Text                *Narrative                        `bson:"text,omitempty" json:"text,omitempty"`
	Extension           []Extension                       `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension   []Extension                       `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Identifier          []Identifier                      `bson:"identifier,omitempty" json:"identifier,omitempty"`
	Status              InventoryReportStatus             `bson:"status" json:"status"`
	CountType           InventoryCountType                `bson:"countType" json:"countType"`
	OperationType       *CodeableConcept                  `bson:"operationType,omitempty" json:"operationType,omitempty"`
	OperationTypeReason *CodeableConcept                  `bson:"operationTypeReason,omitempty" json:"operationTypeReason,omitempty"`
	ReportedDateTime    string                            `bson:"reportedDateTime" json:"reportedDateTime"`
	Reporter            *Reference                        `bson:"reporter,omitempty" json:"reporter,omitempty"`
	ReportingPeriod     *Period                           `bson:"reportingPeriod,omitempty" json:"reportingPeriod,omitempty"`
	InventoryListing    []InventoryReportInventoryListing `bson:"inventoryListing,omitempty" json:"inventoryListing,omitempty"`
	Note                []Annotation                      `bson:"note,omitempty" json:"note,omitempty"`
}
type InventoryReportInventoryListing struct {
	Id                *string                               `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension                           `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension                           `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Location          *Reference                            `bson:"location,omitempty" json:"location,omitempty"`
	ItemStatus        *CodeableConcept                      `bson:"itemStatus,omitempty" json:"itemStatus,omitempty"`
	CountingDateTime  *string                               `bson:"countingDateTime,omitempty" json:"countingDateTime,omitempty"`
	Item              []InventoryReportInventoryListingItem `bson:"item,omitempty" json:"item,omitempty"`
}
type InventoryReportInventoryListingItem struct {
	Id                *string           `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension       `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension       `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Category          *CodeableConcept  `bson:"category,omitempty" json:"category,omitempty"`
	Quantity          Quantity          `bson:"quantity" json:"quantity"`
	Item              CodeableReference `bson:"item" json:"item"`
}
type OtherInventoryReport InventoryReport

// MarshalJSON marshals the given InventoryReport as JSON into a byte slice
func (r InventoryReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherInventoryReport
		ResourceType string `json:"resourceType"`
	}{
		OtherInventoryReport: OtherInventoryReport(r),
		ResourceType:         "InventoryReport",
	})
}

// UnmarshalInventoryReport unmarshals a InventoryReport.
func UnmarshalInventoryReport(b []byte) (InventoryReport, error) {
	var inventoryReport InventoryReport
	if err := json.Unmarshal(b, &inventoryReport); err != nil {
		return inventoryReport, err
	}
	return inventoryReport, nil
}
