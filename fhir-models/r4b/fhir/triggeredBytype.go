// Copyright 2024 Medical Center University Freiburg
// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import (
	"encoding/json"
	"fmt"
	"strings"
)

// THIS FILE IS GENERATED BY https://github.com/mcuf-idim/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// TriggeredBytype is documented here http://hl7.org/fhir/ValueSet/observation-triggeredbytype
type TriggeredBytype int

const (
	TriggeredBytypeReflex TriggeredBytype = iota
	TriggeredBytypeRepeat
	TriggeredBytypeReRun
)

func (code TriggeredBytype) MarshalJSON() ([]byte, error) {
	return json.Marshal(code.Code())
}
func (code *TriggeredBytype) UnmarshalJSON(json []byte) error {
	s := strings.Trim(string(json), "\"")
	switch s {
	case "reflex":
		*code = TriggeredBytypeReflex
	case "repeat":
		*code = TriggeredBytypeRepeat
	case "re-run":
		*code = TriggeredBytypeReRun
	default:
		return fmt.Errorf("unknown TriggeredBytype code `%s`", s)
	}
	return nil
}
func (code TriggeredBytype) String() string {
	return code.Code()
}
func (code TriggeredBytype) Code() string {
	switch code {
	case TriggeredBytypeReflex:
		return "reflex"
	case TriggeredBytypeRepeat:
		return "repeat"
	case TriggeredBytypeReRun:
		return "re-run"
	}
	return "<unknown>"
}
func (code TriggeredBytype) Display() string {
	switch code {
	case TriggeredBytypeReflex:
		return "Reflex"
	case TriggeredBytypeRepeat:
		return "Repeat (per policy)"
	case TriggeredBytypeReRun:
		return "Re-run (per policy)"
	}
	return "<unknown>"
}
func (code TriggeredBytype) Definition() string {
	switch code {
	case TriggeredBytypeReflex:
		return "Performance of one or more other tests depending on the results of the initial test.  This may include collection of additional specimen. While a new ServiceRequest is not required to perform the additional test, where it is still needed (e.g., requesting another laboratory to perform the reflex test), the Observation.basedOn would reference the new ServiceRequest that requested the additional test to be performed as well as the original ServiceRequest to reflect the one that provided the authorization."
	case TriggeredBytypeRepeat:
		return "Performance of the same test again with the same parameters/settings/solution."
	case TriggeredBytypeReRun:
		return "Performance of the same test but with different parameters/settings/solution."
	}
	return "<unknown>"
}
