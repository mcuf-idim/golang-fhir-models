// Copyright 2024 Medical Center University Freiburg
// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import (
	"encoding/json"
	"fmt"
	"strings"
)

// THIS FILE IS GENERATED BY https://github.com/mcuf-idim/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// ReportRelationshipType is documented here http://hl7.org/fhir/ValueSet/report-relation-type
type ReportRelationshipType int

const (
	ReportRelationshipTypeReplaces ReportRelationshipType = iota
	ReportRelationshipTypeAmends
	ReportRelationshipTypeAppends
	ReportRelationshipTypeTransforms
	ReportRelationshipTypeReplacedWith
	ReportRelationshipTypeAmendedWith
	ReportRelationshipTypeAppendedWith
	ReportRelationshipTypeTransformedWith
)

func (code ReportRelationshipType) MarshalJSON() ([]byte, error) {
	return json.Marshal(code.Code())
}
func (code *ReportRelationshipType) UnmarshalJSON(json []byte) error {
	s := strings.Trim(string(json), "\"")
	switch s {
	case "replaces":
		*code = ReportRelationshipTypeReplaces
	case "amends":
		*code = ReportRelationshipTypeAmends
	case "appends":
		*code = ReportRelationshipTypeAppends
	case "transforms":
		*code = ReportRelationshipTypeTransforms
	case "replacedWith":
		*code = ReportRelationshipTypeReplacedWith
	case "amendedWith":
		*code = ReportRelationshipTypeAmendedWith
	case "appendedWith":
		*code = ReportRelationshipTypeAppendedWith
	case "transformedWith":
		*code = ReportRelationshipTypeTransformedWith
	default:
		return fmt.Errorf("unknown ReportRelationshipType code `%s`", s)
	}
	return nil
}
func (code ReportRelationshipType) String() string {
	return code.Code()
}
func (code ReportRelationshipType) Code() string {
	switch code {
	case ReportRelationshipTypeReplaces:
		return "replaces"
	case ReportRelationshipTypeAmends:
		return "amends"
	case ReportRelationshipTypeAppends:
		return "appends"
	case ReportRelationshipTypeTransforms:
		return "transforms"
	case ReportRelationshipTypeReplacedWith:
		return "replacedWith"
	case ReportRelationshipTypeAmendedWith:
		return "amendedWith"
	case ReportRelationshipTypeAppendedWith:
		return "appendedWith"
	case ReportRelationshipTypeTransformedWith:
		return "transformedWith"
	}
	return "<unknown>"
}
func (code ReportRelationshipType) Display() string {
	switch code {
	case ReportRelationshipTypeReplaces:
		return "Replaces"
	case ReportRelationshipTypeAmends:
		return "Amends"
	case ReportRelationshipTypeAppends:
		return "Appends"
	case ReportRelationshipTypeTransforms:
		return "Transforms"
	case ReportRelationshipTypeReplacedWith:
		return "Replaced With"
	case ReportRelationshipTypeAmendedWith:
		return "Amended With"
	case ReportRelationshipTypeAppendedWith:
		return "Appended With"
	case ReportRelationshipTypeTransformedWith:
		return "Transformed With"
	}
	return "<unknown>"
}
func (code ReportRelationshipType) Definition() string {
	switch code {
	case ReportRelationshipTypeReplaces:
		return "This document replaces or supersedes the target document."
	case ReportRelationshipTypeAmends:
		return "This document notes corrections or changes to replace or supersede parts of the target document."
	case ReportRelationshipTypeAppends:
		return "This document adds additional information to the target document."
	case ReportRelationshipTypeTransforms:
		return "This document was generated by transforming the target document (eg format or language conversion)."
	case ReportRelationshipTypeReplacedWith:
		return "This document was."
	case ReportRelationshipTypeAmendedWith:
		return "This document was."
	case ReportRelationshipTypeAppendedWith:
		return "This document was."
	case ReportRelationshipTypeTransformedWith:
		return "This document was."
	}
	return "<unknown>"
}
