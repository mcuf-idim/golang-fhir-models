// Copyright 2024 Medical Center University Freiburg
// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/mcuf-idim/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// DeviceUsage is documented here http://hl7.org/fhir/StructureDefinition/DeviceUsage
type DeviceUsage struct {
	Id                *string               `bson:"id,omitempty" json:"id,omitempty"`
	Meta              *Meta                 `bson:"meta,omitempty" json:"meta,omitempty"`
	ImplicitRules     *string               `bson:"implicitRules,omitempty" json:"implicitRules,omitempty"`
	Language          *string               `bson:"language,omitempty" json:"language,omitempty"`
	Text              *Narrative            `bson:"text,omitempty" json:"text,omitempty"`
	Contained         []json.RawMessage     `bson:"contained,omitempty" json:"contained,omitempty"`
	Extension         []Extension           `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension           `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Identifier        []Identifier          `bson:"identifier,omitempty" json:"identifier,omitempty"`
	BasedOn           []Reference           `bson:"basedOn,omitempty" json:"basedOn,omitempty"`
	Status            DeviceUsageStatus     `bson:"status" json:"status"`
	Category          []CodeableConcept     `bson:"category,omitempty" json:"category,omitempty"`
	Patient           Reference             `bson:"patient" json:"patient"`
	DerivedFrom       []Reference           `bson:"derivedFrom,omitempty" json:"derivedFrom,omitempty"`
	Context           *Reference            `bson:"context,omitempty" json:"context,omitempty"`
	TimingTiming      *Timing               `bson:"timingTiming,omitempty" json:"timingTiming,omitempty"`
	TimingPeriod      *Period               `bson:"timingPeriod,omitempty" json:"timingPeriod,omitempty"`
	TimingDateTime    *string               `bson:"timingDateTime,omitempty" json:"timingDateTime,omitempty"`
	DateAsserted      *string               `bson:"dateAsserted,omitempty" json:"dateAsserted,omitempty"`
	UsageStatus       *CodeableConcept      `bson:"usageStatus,omitempty" json:"usageStatus,omitempty"`
	UsageReason       []CodeableConcept     `bson:"usageReason,omitempty" json:"usageReason,omitempty"`
	Adherence         *DeviceUsageAdherence `bson:"adherence,omitempty" json:"adherence,omitempty"`
	InformationSource *Reference            `bson:"informationSource,omitempty" json:"informationSource,omitempty"`
	Device            CodeableReference     `bson:"device" json:"device"`
	Reason            []CodeableReference   `bson:"reason,omitempty" json:"reason,omitempty"`
	BodySite          *CodeableReference    `bson:"bodySite,omitempty" json:"bodySite,omitempty"`
	Note              []Annotation          `bson:"note,omitempty" json:"note,omitempty"`
}

func (r DeviceUsage) ContainedResources() []json.RawMessage {
	return r.Contained
}

type DeviceUsageAdherence struct {
	Id                *string           `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension       `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension       `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Code              CodeableConcept   `bson:"code" json:"code"`
	Reason            []CodeableConcept `bson:"reason" json:"reason"`
}
type OtherDeviceUsage DeviceUsage

// MarshalJSON marshals the given DeviceUsage as JSON into a byte slice
func (r DeviceUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherDeviceUsage
		ResourceType string `json:"resourceType"`
	}{
		OtherDeviceUsage: OtherDeviceUsage(r),
		ResourceType:     "DeviceUsage",
	})
}
func (r DeviceUsage) ResourceType() string {
	return "DeviceUsage"
}
func (r DeviceUsage) ResourceIdentifier() string {
	if r.Id != nil {
		return *r.Id
	}
	return ""
}

// UnmarshalDeviceUsage unmarshals a DeviceUsage.
func UnmarshalDeviceUsage(b []byte) (DeviceUsage, error) {
	var deviceUsage DeviceUsage
	if err := json.Unmarshal(b, &deviceUsage); err != nil {
		return deviceUsage, err
	}
	return deviceUsage, nil
}
