// Copyright 2024 Medical Center University Freiburg
// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/mcuf-idim/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// ResearchStudy is documented here http://hl7.org/fhir/StructureDefinition/ResearchStudy
type ResearchStudy struct {
	Id                 *string                        `bson:"id,omitempty" json:"id,omitempty"`
	Meta               *Meta                          `bson:"meta,omitempty" json:"meta,omitempty"`
	ImplicitRules      *string                        `bson:"implicitRules,omitempty" json:"implicitRules,omitempty"`
	Language           *string                        `bson:"language,omitempty" json:"language,omitempty"`
	Text               *Narrative                     `bson:"text,omitempty" json:"text,omitempty"`
	Contained          []json.RawMessage              `bson:"contained,omitempty" json:"contained,omitempty"`
	Extension          []Extension                    `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension  []Extension                    `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Url                *string                        `bson:"url,omitempty" json:"url,omitempty"`
	Identifier         []Identifier                   `bson:"identifier,omitempty" json:"identifier,omitempty"`
	Version            *string                        `bson:"version,omitempty" json:"version,omitempty"`
	Name               *string                        `bson:"name,omitempty" json:"name,omitempty"`
	Title              *string                        `bson:"title,omitempty" json:"title,omitempty"`
	Label              []ResearchStudyLabel           `bson:"label,omitempty" json:"label,omitempty"`
	Protocol           []Reference                    `bson:"protocol,omitempty" json:"protocol,omitempty"`
	PartOf             []Reference                    `bson:"partOf,omitempty" json:"partOf,omitempty"`
	RelatedArtifact    []RelatedArtifact              `bson:"relatedArtifact,omitempty" json:"relatedArtifact,omitempty"`
	Date               *string                        `bson:"date,omitempty" json:"date,omitempty"`
	Status             PublicationStatus              `bson:"status" json:"status"`
	PrimaryPurposeType *CodeableConcept               `bson:"primaryPurposeType,omitempty" json:"primaryPurposeType,omitempty"`
	Phase              *CodeableConcept               `bson:"phase,omitempty" json:"phase,omitempty"`
	StudyDesign        []CodeableConcept              `bson:"studyDesign,omitempty" json:"studyDesign,omitempty"`
	Focus              []CodeableReference            `bson:"focus,omitempty" json:"focus,omitempty"`
	Condition          []CodeableConcept              `bson:"condition,omitempty" json:"condition,omitempty"`
	Keyword            []CodeableConcept              `bson:"keyword,omitempty" json:"keyword,omitempty"`
	Region             []CodeableConcept              `bson:"region,omitempty" json:"region,omitempty"`
	DescriptionSummary *string                        `bson:"descriptionSummary,omitempty" json:"descriptionSummary,omitempty"`
	Description        *string                        `bson:"description,omitempty" json:"description,omitempty"`
	Period             *Period                        `bson:"period,omitempty" json:"period,omitempty"`
	Site               []Reference                    `bson:"site,omitempty" json:"site,omitempty"`
	Note               []Annotation                   `bson:"note,omitempty" json:"note,omitempty"`
	Classifier         []CodeableConcept              `bson:"classifier,omitempty" json:"classifier,omitempty"`
	AssociatedParty    []ResearchStudyAssociatedParty `bson:"associatedParty,omitempty" json:"associatedParty,omitempty"`
	ProgressStatus     []ResearchStudyProgressStatus  `bson:"progressStatus,omitempty" json:"progressStatus,omitempty"`
	WhyStopped         *CodeableConcept               `bson:"whyStopped,omitempty" json:"whyStopped,omitempty"`
	Recruitment        *ResearchStudyRecruitment      `bson:"recruitment,omitempty" json:"recruitment,omitempty"`
	ComparisonGroup    []ResearchStudyComparisonGroup `bson:"comparisonGroup,omitempty" json:"comparisonGroup,omitempty"`
	Objective          []ResearchStudyObjective       `bson:"objective,omitempty" json:"objective,omitempty"`
	OutcomeMeasure     []ResearchStudyOutcomeMeasure  `bson:"outcomeMeasure,omitempty" json:"outcomeMeasure,omitempty"`
	Result             []Reference                    `bson:"result,omitempty" json:"result,omitempty"`
}

func (r ResearchStudy) ContainedResources() []json.RawMessage {
	return r.Contained
}

type ResearchStudyLabel struct {
	Id                *string          `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension      `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension      `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Type              *CodeableConcept `bson:"type,omitempty" json:"type,omitempty"`
	Value             *string          `bson:"value,omitempty" json:"value,omitempty"`
}
type ResearchStudyAssociatedParty struct {
	Id                *string           `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension       `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension       `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Name              *string           `bson:"name,omitempty" json:"name,omitempty"`
	Role              CodeableConcept   `bson:"role" json:"role"`
	Period            []Period          `bson:"period,omitempty" json:"period,omitempty"`
	Classifier        []CodeableConcept `bson:"classifier,omitempty" json:"classifier,omitempty"`
	Party             *Reference        `bson:"party,omitempty" json:"party,omitempty"`
}
type ResearchStudyProgressStatus struct {
	Id                *string         `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension     `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension     `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	State             CodeableConcept `bson:"state" json:"state"`
	Actual            *bool           `bson:"actual,omitempty" json:"actual,omitempty"`
	Period            *Period         `bson:"period,omitempty" json:"period,omitempty"`
}
type ResearchStudyRecruitment struct {
	Id                *string     `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	TargetNumber      *int        `bson:"targetNumber,omitempty" json:"targetNumber,omitempty"`
	ActualNumber      *int        `bson:"actualNumber,omitempty" json:"actualNumber,omitempty"`
	Eligibility       *Reference  `bson:"eligibility,omitempty" json:"eligibility,omitempty"`
	ActualGroup       *Reference  `bson:"actualGroup,omitempty" json:"actualGroup,omitempty"`
}
type ResearchStudyComparisonGroup struct {
	Id                *string          `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension      `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension      `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	LinkId            *string          `bson:"linkId,omitempty" json:"linkId,omitempty"`
	Name              string           `bson:"name" json:"name"`
	Type              *CodeableConcept `bson:"type,omitempty" json:"type,omitempty"`
	Description       *string          `bson:"description,omitempty" json:"description,omitempty"`
	IntendedExposure  []Reference      `bson:"intendedExposure,omitempty" json:"intendedExposure,omitempty"`
	ObservedGroup     *Reference       `bson:"observedGroup,omitempty" json:"observedGroup,omitempty"`
}
type ResearchStudyObjective struct {
	Id                *string          `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension      `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension      `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Name              *string          `bson:"name,omitempty" json:"name,omitempty"`
	Type              *CodeableConcept `bson:"type,omitempty" json:"type,omitempty"`
	Description       *string          `bson:"description,omitempty" json:"description,omitempty"`
}
type ResearchStudyOutcomeMeasure struct {
	Id                *string           `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension       `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension       `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Name              *string           `bson:"name,omitempty" json:"name,omitempty"`
	Type              []CodeableConcept `bson:"type,omitempty" json:"type,omitempty"`
	Description       *string           `bson:"description,omitempty" json:"description,omitempty"`
	Reference         *Reference        `bson:"reference,omitempty" json:"reference,omitempty"`
}
type OtherResearchStudy ResearchStudy

// MarshalJSON marshals the given ResearchStudy as JSON into a byte slice
func (r ResearchStudy) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherResearchStudy
		ResourceType string `json:"resourceType"`
	}{
		OtherResearchStudy: OtherResearchStudy(r),
		ResourceType:       "ResearchStudy",
	})
}
func (r ResearchStudy) ResourceType() string {
	return "ResearchStudy"
}
func (r ResearchStudy) ResourceIdentifier() string {
	if r.Id != nil {
		return *r.Id
	}
	return ""
}

// UnmarshalResearchStudy unmarshals a ResearchStudy.
func UnmarshalResearchStudy(b []byte) (ResearchStudy, error) {
	var researchStudy ResearchStudy
	if err := json.Unmarshal(b, &researchStudy); err != nil {
		return researchStudy, err
	}
	return researchStudy, nil
}
