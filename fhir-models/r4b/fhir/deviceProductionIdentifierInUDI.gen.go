// Copyright 2024 Medical Center University Freiburg
// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import (
	"encoding/json"
	"fmt"
	"strings"
)

// THIS FILE IS GENERATED BY https://github.com/mcuf-idim/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// DeviceProductionIdentifierInUDI is documented here http://hl7.org/fhir/ValueSet/device-productidentifierinudi
type DeviceProductionIdentifierInUDI int

const (
	DeviceProductionIdentifierInUDILotNumber DeviceProductionIdentifierInUDI = iota
	DeviceProductionIdentifierInUDIManufacturedDate
	DeviceProductionIdentifierInUDISerialNumber
	DeviceProductionIdentifierInUDIExpirationDate
	DeviceProductionIdentifierInUDIBiologicalSource
	DeviceProductionIdentifierInUDISoftwareVersion
)

func (code DeviceProductionIdentifierInUDI) MarshalJSON() ([]byte, error) {
	return json.Marshal(code.Code())
}
func (code *DeviceProductionIdentifierInUDI) UnmarshalJSON(json []byte) error {
	s := strings.Trim(string(json), "\"")
	switch s {
	case "lot-number":
		*code = DeviceProductionIdentifierInUDILotNumber
	case "manufactured-date":
		*code = DeviceProductionIdentifierInUDIManufacturedDate
	case "serial-number":
		*code = DeviceProductionIdentifierInUDISerialNumber
	case "expiration-date":
		*code = DeviceProductionIdentifierInUDIExpirationDate
	case "biological-source":
		*code = DeviceProductionIdentifierInUDIBiologicalSource
	case "software-version":
		*code = DeviceProductionIdentifierInUDISoftwareVersion
	default:
		return fmt.Errorf("unknown DeviceProductionIdentifierInUDI code `%s`", s)
	}
	return nil
}
func (code DeviceProductionIdentifierInUDI) String() string {
	return code.Code()
}
func (code DeviceProductionIdentifierInUDI) Code() string {
	switch code {
	case DeviceProductionIdentifierInUDILotNumber:
		return "lot-number"
	case DeviceProductionIdentifierInUDIManufacturedDate:
		return "manufactured-date"
	case DeviceProductionIdentifierInUDISerialNumber:
		return "serial-number"
	case DeviceProductionIdentifierInUDIExpirationDate:
		return "expiration-date"
	case DeviceProductionIdentifierInUDIBiologicalSource:
		return "biological-source"
	case DeviceProductionIdentifierInUDISoftwareVersion:
		return "software-version"
	}
	return "<unknown>"
}
func (code DeviceProductionIdentifierInUDI) Display() string {
	switch code {
	case DeviceProductionIdentifierInUDILotNumber:
		return "Lot Number"
	case DeviceProductionIdentifierInUDIManufacturedDate:
		return "Manufactured date"
	case DeviceProductionIdentifierInUDISerialNumber:
		return "Serial Number"
	case DeviceProductionIdentifierInUDIExpirationDate:
		return "Expiration date"
	case DeviceProductionIdentifierInUDIBiologicalSource:
		return "Biological source"
	case DeviceProductionIdentifierInUDISoftwareVersion:
		return "Software Version"
	}
	return "<unknown>"
}
func (code DeviceProductionIdentifierInUDI) Definition() string {
	switch code {
	case DeviceProductionIdentifierInUDILotNumber:
		return "The label includes the lot number."
	case DeviceProductionIdentifierInUDIManufacturedDate:
		return "The label includes the manufacture date."
	case DeviceProductionIdentifierInUDISerialNumber:
		return "The label includes the serial number."
	case DeviceProductionIdentifierInUDIExpirationDate:
		return "The label includes the expiration date."
	case DeviceProductionIdentifierInUDIBiologicalSource:
		return "The label includes the biological source identifier."
	case DeviceProductionIdentifierInUDISoftwareVersion:
		return "The label includes the software version."
	}
	return "<unknown>"
}
