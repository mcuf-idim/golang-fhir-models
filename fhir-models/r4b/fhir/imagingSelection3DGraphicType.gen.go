// Copyright 2024 Medical Center University Freiburg
// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import (
	"encoding/json"
	"fmt"
	"strings"
)

// THIS FILE IS GENERATED BY https://github.com/mcuf-idim/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// ImagingSelection3DGraphicType is documented here http://hl7.org/fhir/ValueSet/imagingselection-3dgraphictype
type ImagingSelection3DGraphicType int

const (
	ImagingSelection3DGraphicTypePoint ImagingSelection3DGraphicType = iota
	ImagingSelection3DGraphicTypeMultipoint
	ImagingSelection3DGraphicTypePolyline
	ImagingSelection3DGraphicTypePolygon
	ImagingSelection3DGraphicTypeEllipse
	ImagingSelection3DGraphicTypeEllipsoid
)

func (code ImagingSelection3DGraphicType) MarshalJSON() ([]byte, error) {
	return json.Marshal(code.Code())
}
func (code *ImagingSelection3DGraphicType) UnmarshalJSON(json []byte) error {
	s := strings.Trim(string(json), "\"")
	switch s {
	case "point":
		*code = ImagingSelection3DGraphicTypePoint
	case "multipoint":
		*code = ImagingSelection3DGraphicTypeMultipoint
	case "polyline":
		*code = ImagingSelection3DGraphicTypePolyline
	case "polygon":
		*code = ImagingSelection3DGraphicTypePolygon
	case "ellipse":
		*code = ImagingSelection3DGraphicTypeEllipse
	case "ellipsoid":
		*code = ImagingSelection3DGraphicTypeEllipsoid
	default:
		return fmt.Errorf("unknown ImagingSelection3DGraphicType code `%s`", s)
	}
	return nil
}
func (code ImagingSelection3DGraphicType) String() string {
	return code.Code()
}
func (code ImagingSelection3DGraphicType) Code() string {
	switch code {
	case ImagingSelection3DGraphicTypePoint:
		return "point"
	case ImagingSelection3DGraphicTypeMultipoint:
		return "multipoint"
	case ImagingSelection3DGraphicTypePolyline:
		return "polyline"
	case ImagingSelection3DGraphicTypePolygon:
		return "polygon"
	case ImagingSelection3DGraphicTypeEllipse:
		return "ellipse"
	case ImagingSelection3DGraphicTypeEllipsoid:
		return "ellipsoid"
	}
	return "<unknown>"
}
func (code ImagingSelection3DGraphicType) Display() string {
	switch code {
	case ImagingSelection3DGraphicTypePoint:
		return "POINT"
	case ImagingSelection3DGraphicTypeMultipoint:
		return "MULTIPOINT"
	case ImagingSelection3DGraphicTypePolyline:
		return "POLYLINE"
	case ImagingSelection3DGraphicTypePolygon:
		return "POLYGON"
	case ImagingSelection3DGraphicTypeEllipse:
		return "ELLIPSE"
	case ImagingSelection3DGraphicTypeEllipsoid:
		return "ELLIPSOID"
	}
	return "<unknown>"
}
func (code ImagingSelection3DGraphicType) Definition() string {
	switch code {
	case ImagingSelection3DGraphicTypePoint:
		return "A single location denoted by a single (x,y,z) triplet."
	case ImagingSelection3DGraphicTypeMultipoint:
		return "multiple locations each denoted by an (x,y,z) triplet; the points need not be coplanar."
	case ImagingSelection3DGraphicTypePolyline:
		return "a series of connected line segments with ordered vertices denoted by (x,y,z) triplets; the points need not be coplanar."
	case ImagingSelection3DGraphicTypePolygon:
		return "a series of connected line segments with ordered vertices denoted by (x,y,z) triplets, where the first and last vertices shall be the same forming a polygon; the points shall be coplanar."
	case ImagingSelection3DGraphicTypeEllipse:
		return "an ellipse defined by four (x,y,z) triplets, the first two triplets specifying the endpoints of the major axis and the second two triplets specifying the endpoints of the minor axis."
	case ImagingSelection3DGraphicTypeEllipsoid:
		return "a three-dimensional geometric surface whose plane sections are either ellipses or circles and contains three intersecting orthogonal axes, \"a\", \"b\", and \"c\"; the ellipsoid is defined by six (x,y,z) triplets, the first and second triplets specifying the endpoints of axis \"a\", the third and fourth triplets specifying the endpoints of axis \"b\", and the fifth and sixth triplets specifying the endpoints of axis \"c\"."
	}
	return "<unknown>"
}
