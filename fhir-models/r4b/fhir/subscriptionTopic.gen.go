// Copyright 2024 Medical Center University Freiburg
// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/mcuf-idim/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// SubscriptionTopic is documented here http://hl7.org/fhir/StructureDefinition/SubscriptionTopic
type SubscriptionTopic struct {
	Id                     *string                              `bson:"id,omitempty" json:"id,omitempty"`
	Meta                   *Meta                                `bson:"meta,omitempty" json:"meta,omitempty"`
	ImplicitRules          *string                              `bson:"implicitRules,omitempty" json:"implicitRules,omitempty"`
	Language               *string                              `bson:"language,omitempty" json:"language,omitempty"`
	Text                   *Narrative                           `bson:"text,omitempty" json:"text,omitempty"`
	Extension              []Extension                          `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension      []Extension                          `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Url                    string                               `bson:"url" json:"url"`
	Identifier             []Identifier                         `bson:"identifier,omitempty" json:"identifier,omitempty"`
	Version                *string                              `bson:"version,omitempty" json:"version,omitempty"`
	VersionAlgorithmString *string                              `bson:"versionAlgorithmString,omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding *Coding                              `bson:"versionAlgorithmCoding,omitempty" json:"versionAlgorithmCoding,omitempty"`
	Name                   *string                              `bson:"name,omitempty" json:"name,omitempty"`
	Title                  *string                              `bson:"title,omitempty" json:"title,omitempty"`
	DerivedFrom            []string                             `bson:"derivedFrom,omitempty" json:"derivedFrom,omitempty"`
	Status                 PublicationStatus                    `bson:"status" json:"status"`
	Experimental           *bool                                `bson:"experimental,omitempty" json:"experimental,omitempty"`
	Date                   *string                              `bson:"date,omitempty" json:"date,omitempty"`
	Publisher              *string                              `bson:"publisher,omitempty" json:"publisher,omitempty"`
	Contact                []ContactDetail                      `bson:"contact,omitempty" json:"contact,omitempty"`
	Description            *string                              `bson:"description,omitempty" json:"description,omitempty"`
	UseContext             []UsageContext                       `bson:"useContext,omitempty" json:"useContext,omitempty"`
	Jurisdiction           []CodeableConcept                    `bson:"jurisdiction,omitempty" json:"jurisdiction,omitempty"`
	Purpose                *string                              `bson:"purpose,omitempty" json:"purpose,omitempty"`
	Copyright              *string                              `bson:"copyright,omitempty" json:"copyright,omitempty"`
	CopyrightLabel         *string                              `bson:"copyrightLabel,omitempty" json:"copyrightLabel,omitempty"`
	ApprovalDate           *string                              `bson:"approvalDate,omitempty" json:"approvalDate,omitempty"`
	LastReviewDate         *string                              `bson:"lastReviewDate,omitempty" json:"lastReviewDate,omitempty"`
	EffectivePeriod        *Period                              `bson:"effectivePeriod,omitempty" json:"effectivePeriod,omitempty"`
	ResourceTrigger        []SubscriptionTopicResourceTrigger   `bson:"resourceTrigger,omitempty" json:"resourceTrigger,omitempty"`
	EventTrigger           []SubscriptionTopicEventTrigger      `bson:"eventTrigger,omitempty" json:"eventTrigger,omitempty"`
	CanFilterBy            []SubscriptionTopicCanFilterBy       `bson:"canFilterBy,omitempty" json:"canFilterBy,omitempty"`
	NotificationShape      []SubscriptionTopicNotificationShape `bson:"notificationShape,omitempty" json:"notificationShape,omitempty"`
}
type SubscriptionTopicResourceTrigger struct {
	Id                   *string                                        `bson:"id,omitempty" json:"id,omitempty"`
	Extension            []Extension                                    `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension    []Extension                                    `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Description          *string                                        `bson:"description,omitempty" json:"description,omitempty"`
	Resource             string                                         `bson:"resource" json:"resource"`
	SupportedInteraction []InteractionTrigger                           `bson:"supportedInteraction,omitempty" json:"supportedInteraction,omitempty"`
	QueryCriteria        *SubscriptionTopicResourceTriggerQueryCriteria `bson:"queryCriteria,omitempty" json:"queryCriteria,omitempty"`
	FhirPathCriteria     *string                                        `bson:"fhirPathCriteria,omitempty" json:"fhirPathCriteria,omitempty"`
}
type SubscriptionTopicResourceTriggerQueryCriteria struct {
	Id                *string                    `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension                `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension                `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Previous          *string                    `bson:"previous,omitempty" json:"previous,omitempty"`
	ResultForCreate   *CriteriaNotExistsBehavior `bson:"resultForCreate,omitempty" json:"resultForCreate,omitempty"`
	Current           *string                    `bson:"current,omitempty" json:"current,omitempty"`
	ResultForDelete   *CriteriaNotExistsBehavior `bson:"resultForDelete,omitempty" json:"resultForDelete,omitempty"`
	RequireBoth       *bool                      `bson:"requireBoth,omitempty" json:"requireBoth,omitempty"`
}
type SubscriptionTopicEventTrigger struct {
	Id                *string         `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension     `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension     `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Description       *string         `bson:"description,omitempty" json:"description,omitempty"`
	Event             CodeableConcept `bson:"event" json:"event"`
	Resource          string          `bson:"resource" json:"resource"`
}
type SubscriptionTopicCanFilterBy struct {
	Id                *string              `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension          `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension          `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Description       *string              `bson:"description,omitempty" json:"description,omitempty"`
	Resource          *string              `bson:"resource,omitempty" json:"resource,omitempty"`
	FilterParameter   string               `bson:"filterParameter" json:"filterParameter"`
	FilterDefinition  *string              `bson:"filterDefinition,omitempty" json:"filterDefinition,omitempty"`
	Comparator        []SearchComparator   `bson:"comparator,omitempty" json:"comparator,omitempty"`
	Modifier          []SearchModifierCode `bson:"modifier,omitempty" json:"modifier,omitempty"`
}
type SubscriptionTopicNotificationShape struct {
	Id                *string     `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Resource          string      `bson:"resource" json:"resource"`
	Include           []string    `bson:"include,omitempty" json:"include,omitempty"`
	RevInclude        []string    `bson:"revInclude,omitempty" json:"revInclude,omitempty"`
}
type OtherSubscriptionTopic SubscriptionTopic

// MarshalJSON marshals the given SubscriptionTopic as JSON into a byte slice
func (r SubscriptionTopic) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherSubscriptionTopic
		ResourceType string `json:"resourceType"`
	}{
		OtherSubscriptionTopic: OtherSubscriptionTopic(r),
		ResourceType:           "SubscriptionTopic",
	})
}
func (r SubscriptionTopic) ResourceType() string {
	return "SubscriptionTopic"
}

// UnmarshalSubscriptionTopic unmarshals a SubscriptionTopic.
func UnmarshalSubscriptionTopic(b []byte) (SubscriptionTopic, error) {
	var subscriptionTopic SubscriptionTopic
	if err := json.Unmarshal(b, &subscriptionTopic); err != nil {
		return subscriptionTopic, err
	}
	return subscriptionTopic, nil
}
