// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// ActorDefinition is documented here http://hl7.org/fhir/StructureDefinition/ActorDefinition
type ActorDefinition struct {
	Id                     *string                  `bson:"id,omitempty" json:"id,omitempty"`
	Meta                   *Meta                    `bson:"meta,omitempty" json:"meta,omitempty"`
	ImplicitRules          *string                  `bson:"implicitRules,omitempty" json:"implicitRules,omitempty"`
	Language               *string                  `bson:"language,omitempty" json:"language,omitempty"`
	Text                   *Narrative               `bson:"text,omitempty" json:"text,omitempty"`
	Extension              []Extension              `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension      []Extension              `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Url                    *string                  `bson:"url,omitempty" json:"url,omitempty"`
	Identifier             []Identifier             `bson:"identifier,omitempty" json:"identifier,omitempty"`
	Version                *string                  `bson:"version,omitempty" json:"version,omitempty"`
	VersionAlgorithmString *string                  `bson:"versionAlgorithmString,omitempty" json:"versionAlgorithmString,omitempty"`
	VersionAlgorithmCoding *Coding                  `bson:"versionAlgorithmCoding,omitempty" json:"versionAlgorithmCoding,omitempty"`
	Name                   *string                  `bson:"name,omitempty" json:"name,omitempty"`
	Title                  *string                  `bson:"title,omitempty" json:"title,omitempty"`
	Status                 PublicationStatus        `bson:"status" json:"status"`
	Experimental           *bool                    `bson:"experimental,omitempty" json:"experimental,omitempty"`
	Date                   *string                  `bson:"date,omitempty" json:"date,omitempty"`
	Publisher              *string                  `bson:"publisher,omitempty" json:"publisher,omitempty"`
	Contact                []ContactDetail          `bson:"contact,omitempty" json:"contact,omitempty"`
	Description            *string                  `bson:"description,omitempty" json:"description,omitempty"`
	UseContext             []UsageContext           `bson:"useContext,omitempty" json:"useContext,omitempty"`
	Jurisdiction           []CodeableConcept        `bson:"jurisdiction,omitempty" json:"jurisdiction,omitempty"`
	Purpose                *string                  `bson:"purpose,omitempty" json:"purpose,omitempty"`
	Copyright              *string                  `bson:"copyright,omitempty" json:"copyright,omitempty"`
	CopyrightLabel         *string                  `bson:"copyrightLabel,omitempty" json:"copyrightLabel,omitempty"`
	Type                   ExampleScenarioActorType `bson:"type" json:"type"`
	Documentation          *string                  `bson:"documentation,omitempty" json:"documentation,omitempty"`
	Reference              []string                 `bson:"reference,omitempty" json:"reference,omitempty"`
	Capabilities           *string                  `bson:"capabilities,omitempty" json:"capabilities,omitempty"`
	DerivedFrom            []string                 `bson:"derivedFrom,omitempty" json:"derivedFrom,omitempty"`
}
type OtherActorDefinition ActorDefinition

// MarshalJSON marshals the given ActorDefinition as JSON into a byte slice
func (r ActorDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherActorDefinition
		ResourceType string `json:"resourceType"`
	}{
		OtherActorDefinition: OtherActorDefinition(r),
		ResourceType:         "ActorDefinition",
	})
}

// UnmarshalActorDefinition unmarshals a ActorDefinition.
func UnmarshalActorDefinition(b []byte) (ActorDefinition, error) {
	var actorDefinition ActorDefinition
	if err := json.Unmarshal(b, &actorDefinition); err != nil {
		return actorDefinition, err
	}
	return actorDefinition, nil
}
