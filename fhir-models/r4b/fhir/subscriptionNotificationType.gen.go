// Copyright 2024 Medical Center University Freiburg
// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import (
	"encoding/json"
	"fmt"
	"strings"
)

// THIS FILE IS GENERATED BY https://github.com/mcuf-idim/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// SubscriptionNotificationType is documented here http://hl7.org/fhir/ValueSet/subscription-notification-type
type SubscriptionNotificationType int

const (
	SubscriptionNotificationTypeHandshake SubscriptionNotificationType = iota
	SubscriptionNotificationTypeHeartbeat
	SubscriptionNotificationTypeEventNotification
	SubscriptionNotificationTypeQueryStatus
	SubscriptionNotificationTypeQueryEvent
)

func (code SubscriptionNotificationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(code.Code())
}
func (code *SubscriptionNotificationType) UnmarshalJSON(json []byte) error {
	s := strings.Trim(string(json), "\"")
	switch s {
	case "handshake":
		*code = SubscriptionNotificationTypeHandshake
	case "heartbeat":
		*code = SubscriptionNotificationTypeHeartbeat
	case "event-notification":
		*code = SubscriptionNotificationTypeEventNotification
	case "query-status":
		*code = SubscriptionNotificationTypeQueryStatus
	case "query-event":
		*code = SubscriptionNotificationTypeQueryEvent
	default:
		return fmt.Errorf("unknown SubscriptionNotificationType code `%s`", s)
	}
	return nil
}
func (code SubscriptionNotificationType) String() string {
	return code.Code()
}
func (code SubscriptionNotificationType) Code() string {
	switch code {
	case SubscriptionNotificationTypeHandshake:
		return "handshake"
	case SubscriptionNotificationTypeHeartbeat:
		return "heartbeat"
	case SubscriptionNotificationTypeEventNotification:
		return "event-notification"
	case SubscriptionNotificationTypeQueryStatus:
		return "query-status"
	case SubscriptionNotificationTypeQueryEvent:
		return "query-event"
	}
	return "<unknown>"
}
func (code SubscriptionNotificationType) Display() string {
	switch code {
	case SubscriptionNotificationTypeHandshake:
		return "Handshake"
	case SubscriptionNotificationTypeHeartbeat:
		return "Heartbeat"
	case SubscriptionNotificationTypeEventNotification:
		return "Event Notification"
	case SubscriptionNotificationTypeQueryStatus:
		return "Query Status"
	case SubscriptionNotificationTypeQueryEvent:
		return "Query Event"
	}
	return "<unknown>"
}
func (code SubscriptionNotificationType) Definition() string {
	switch code {
	case SubscriptionNotificationTypeHandshake:
		return "The status was generated as part of the setup or verification of a communications channel."
	case SubscriptionNotificationTypeHeartbeat:
		return "The status was generated to perform a heartbeat notification to the subscriber."
	case SubscriptionNotificationTypeEventNotification:
		return "The status was generated for an event to the subscriber."
	case SubscriptionNotificationTypeQueryStatus:
		return "The status was generated in response to a status query/request."
	case SubscriptionNotificationTypeQueryEvent:
		return "The status was generated in response to an event query/request."
	}
	return "<unknown>"
}
