// Copyright 2024 Medical Center University Freiburg
// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/mcuf-idim/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// Consent is documented here http://hl7.org/fhir/StructureDefinition/Consent
type Consent struct {
	Id                *string               `bson:"id,omitempty" json:"id,omitempty"`
	Meta              *Meta                 `bson:"meta,omitempty" json:"meta,omitempty"`
	ImplicitRules     *string               `bson:"implicitRules,omitempty" json:"implicitRules,omitempty"`
	Language          *string               `bson:"language,omitempty" json:"language,omitempty"`
	Text              *Narrative            `bson:"text,omitempty" json:"text,omitempty"`
	Contained         []json.RawMessage     `bson:"contained,omitempty" json:"contained,omitempty"`
	Extension         []Extension           `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension           `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Identifier        []Identifier          `bson:"identifier,omitempty" json:"identifier,omitempty"`
	Status            ConsentState          `bson:"status" json:"status"`
	Category          []CodeableConcept     `bson:"category,omitempty" json:"category,omitempty"`
	Subject           *Reference            `bson:"subject,omitempty" json:"subject,omitempty"`
	Date              *string               `bson:"date,omitempty" json:"date,omitempty"`
	Period            *Period               `bson:"period,omitempty" json:"period,omitempty"`
	Grantor           []Reference           `bson:"grantor,omitempty" json:"grantor,omitempty"`
	Grantee           []Reference           `bson:"grantee,omitempty" json:"grantee,omitempty"`
	Manager           []Reference           `bson:"manager,omitempty" json:"manager,omitempty"`
	Controller        []Reference           `bson:"controller,omitempty" json:"controller,omitempty"`
	SourceAttachment  []Attachment          `bson:"sourceAttachment,omitempty" json:"sourceAttachment,omitempty"`
	SourceReference   []Reference           `bson:"sourceReference,omitempty" json:"sourceReference,omitempty"`
	RegulatoryBasis   []CodeableConcept     `bson:"regulatoryBasis,omitempty" json:"regulatoryBasis,omitempty"`
	PolicyBasis       *ConsentPolicyBasis   `bson:"policyBasis,omitempty" json:"policyBasis,omitempty"`
	PolicyText        []Reference           `bson:"policyText,omitempty" json:"policyText,omitempty"`
	Verification      []ConsentVerification `bson:"verification,omitempty" json:"verification,omitempty"`
	Decision          *ConsentProvisionType `bson:"decision,omitempty" json:"decision,omitempty"`
	Provision         []ConsentProvision    `bson:"provision,omitempty" json:"provision,omitempty"`
}

func (r Consent) ContainedResources() []json.RawMessage {
	return r.Contained
}

type ConsentPolicyBasis struct {
	Id                *string     `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Reference         *Reference  `bson:"reference,omitempty" json:"reference,omitempty"`
	Url               *string     `bson:"url,omitempty" json:"url,omitempty"`
}
type ConsentVerification struct {
	Id                *string          `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension      `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension      `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Verified          bool             `bson:"verified" json:"verified"`
	VerificationType  *CodeableConcept `bson:"verificationType,omitempty" json:"verificationType,omitempty"`
	VerifiedBy        *Reference       `bson:"verifiedBy,omitempty" json:"verifiedBy,omitempty"`
	VerifiedWith      *Reference       `bson:"verifiedWith,omitempty" json:"verifiedWith,omitempty"`
	VerificationDate  []string         `bson:"verificationDate,omitempty" json:"verificationDate,omitempty"`
}
type ConsentProvision struct {
	Id                *string                 `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension             `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension             `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Period            *Period                 `bson:"period,omitempty" json:"period,omitempty"`
	Actor             []ConsentProvisionActor `bson:"actor,omitempty" json:"actor,omitempty"`
	Action            []CodeableConcept       `bson:"action,omitempty" json:"action,omitempty"`
	SecurityLabel     []Coding                `bson:"securityLabel,omitempty" json:"securityLabel,omitempty"`
	Purpose           []Coding                `bson:"purpose,omitempty" json:"purpose,omitempty"`
	DocumentType      []Coding                `bson:"documentType,omitempty" json:"documentType,omitempty"`
	ResourceType      []Coding                `bson:"resourceType,omitempty" json:"resourceType,omitempty"`
	Code              []CodeableConcept       `bson:"code,omitempty" json:"code,omitempty"`
	DataPeriod        *Period                 `bson:"dataPeriod,omitempty" json:"dataPeriod,omitempty"`
	Data              []ConsentProvisionData  `bson:"data,omitempty" json:"data,omitempty"`
	Expression        *Expression             `bson:"expression,omitempty" json:"expression,omitempty"`
	Provision         []ConsentProvision      `bson:"provision,omitempty" json:"provision,omitempty"`
}
type ConsentProvisionActor struct {
	Id                *string          `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension      `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension      `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Role              *CodeableConcept `bson:"role,omitempty" json:"role,omitempty"`
	Reference         *Reference       `bson:"reference,omitempty" json:"reference,omitempty"`
}
type ConsentProvisionData struct {
	Id                *string            `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension        `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension        `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Meaning           ConsentDataMeaning `bson:"meaning" json:"meaning"`
	Reference         Reference          `bson:"reference" json:"reference"`
}
type OtherConsent Consent

// MarshalJSON marshals the given Consent as JSON into a byte slice
func (r Consent) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherConsent
		ResourceType string `json:"resourceType"`
	}{
		OtherConsent: OtherConsent(r),
		ResourceType: "Consent",
	})
}
func (r Consent) ResourceType() string {
	return "Consent"
}

// UnmarshalConsent unmarshals a Consent.
func UnmarshalConsent(b []byte) (Consent, error) {
	var consent Consent
	if err := json.Unmarshal(b, &consent); err != nil {
		return consent, err
	}
	return consent, nil
}
