// Copyright 2024 Medical Center University Freiburg
// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/mcuf-idim/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// Specimen is documented here http://hl7.org/fhir/StructureDefinition/Specimen
type Specimen struct {
	Id                  *string              `bson:"id,omitempty" json:"id,omitempty"`
	Meta                *Meta                `bson:"meta,omitempty" json:"meta,omitempty"`
	ImplicitRules       *string              `bson:"implicitRules,omitempty" json:"implicitRules,omitempty"`
	Language            *string              `bson:"language,omitempty" json:"language,omitempty"`
	Text                *Narrative           `bson:"text,omitempty" json:"text,omitempty"`
	Contained           []json.RawMessage    `bson:"contained,omitempty" json:"contained,omitempty"`
	Extension           []Extension          `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension   []Extension          `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Identifier          []Identifier         `bson:"identifier,omitempty" json:"identifier,omitempty"`
	AccessionIdentifier *Identifier          `bson:"accessionIdentifier,omitempty" json:"accessionIdentifier,omitempty"`
	Status              *SpecimenStatus      `bson:"status,omitempty" json:"status,omitempty"`
	Type                *CodeableConcept     `bson:"type,omitempty" json:"type,omitempty"`
	Subject             *Reference           `bson:"subject,omitempty" json:"subject,omitempty"`
	ReceivedTime        *string              `bson:"receivedTime,omitempty" json:"receivedTime,omitempty"`
	Parent              []Reference          `bson:"parent,omitempty" json:"parent,omitempty"`
	Request             []Reference          `bson:"request,omitempty" json:"request,omitempty"`
	Combined            *SpecimenCombined    `bson:"combined,omitempty" json:"combined,omitempty"`
	Role                []CodeableConcept    `bson:"role,omitempty" json:"role,omitempty"`
	Feature             []SpecimenFeature    `bson:"feature,omitempty" json:"feature,omitempty"`
	Collection          *SpecimenCollection  `bson:"collection,omitempty" json:"collection,omitempty"`
	Processing          []SpecimenProcessing `bson:"processing,omitempty" json:"processing,omitempty"`
	Container           []SpecimenContainer  `bson:"container,omitempty" json:"container,omitempty"`
	Condition           []CodeableConcept    `bson:"condition,omitempty" json:"condition,omitempty"`
	Note                []Annotation         `bson:"note,omitempty" json:"note,omitempty"`
}

func (r Specimen) ContainedResources() []json.RawMessage {
	return r.Contained
}

type SpecimenFeature struct {
	Id                *string         `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension     `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension     `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Type              CodeableConcept `bson:"type" json:"type"`
	Description       string          `bson:"description" json:"description"`
}
type SpecimenCollection struct {
	Id                           *string            `bson:"id,omitempty" json:"id,omitempty"`
	Extension                    []Extension        `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension            []Extension        `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Collector                    *Reference         `bson:"collector,omitempty" json:"collector,omitempty"`
	CollectedDateTime            *string            `bson:"collectedDateTime,omitempty" json:"collectedDateTime,omitempty"`
	CollectedPeriod              *Period            `bson:"collectedPeriod,omitempty" json:"collectedPeriod,omitempty"`
	Duration                     *Duration          `bson:"duration,omitempty" json:"duration,omitempty"`
	Quantity                     *Quantity          `bson:"quantity,omitempty" json:"quantity,omitempty"`
	Method                       *CodeableConcept   `bson:"method,omitempty" json:"method,omitempty"`
	Device                       *CodeableReference `bson:"device,omitempty" json:"device,omitempty"`
	Procedure                    *Reference         `bson:"procedure,omitempty" json:"procedure,omitempty"`
	BodySite                     *CodeableReference `bson:"bodySite,omitempty" json:"bodySite,omitempty"`
	FastingStatusCodeableConcept *CodeableConcept   `bson:"fastingStatusCodeableConcept,omitempty" json:"fastingStatusCodeableConcept,omitempty"`
	FastingStatusDuration        *Duration          `bson:"fastingStatusDuration,omitempty" json:"fastingStatusDuration,omitempty"`
}
type SpecimenProcessing struct {
	Id                *string          `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension      `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension      `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Description       *string          `bson:"description,omitempty" json:"description,omitempty"`
	Method            *CodeableConcept `bson:"method,omitempty" json:"method,omitempty"`
	Additive          []Reference      `bson:"additive,omitempty" json:"additive,omitempty"`
	TimeDateTime      *string          `bson:"timeDateTime,omitempty" json:"timeDateTime,omitempty"`
	TimePeriod        *Period          `bson:"timePeriod,omitempty" json:"timePeriod,omitempty"`
}
type SpecimenContainer struct {
	Id                *string     `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Device            Reference   `bson:"device" json:"device"`
	Location          *Reference  `bson:"location,omitempty" json:"location,omitempty"`
	SpecimenQuantity  *Quantity   `bson:"specimenQuantity,omitempty" json:"specimenQuantity,omitempty"`
}
type OtherSpecimen Specimen

// MarshalJSON marshals the given Specimen as JSON into a byte slice
func (r Specimen) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherSpecimen
		ResourceType string `json:"resourceType"`
	}{
		OtherSpecimen: OtherSpecimen(r),
		ResourceType:  "Specimen",
	})
}
func (r Specimen) ResourceType() string {
	return "Specimen"
}
func (r Specimen) ResourceIdentifier() string {
	if r.Id != nil {
		return *r.Id
	}
	return ""
}

// UnmarshalSpecimen unmarshals a Specimen.
func UnmarshalSpecimen(b []byte) (Specimen, error) {
	var specimen Specimen
	if err := json.Unmarshal(b, &specimen); err != nil {
		return specimen, err
	}
	return specimen, nil
}
