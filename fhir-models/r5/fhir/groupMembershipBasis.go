// Copyright 2024 Medical Center University Freiburg
// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import (
	"encoding/json"
	"fmt"
	"strings"
)

// THIS FILE IS GENERATED BY https://github.com/mcuf-idim/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// GroupMembershipBasis is documented here http://hl7.org/fhir/ValueSet/group-membership-basis
type GroupMembershipBasis int

const (
	GroupMembershipBasisDefinitional GroupMembershipBasis = iota
	GroupMembershipBasisEnumerated
)

func (code GroupMembershipBasis) MarshalJSON() ([]byte, error) {
	return json.Marshal(code.Code())
}
func (code *GroupMembershipBasis) UnmarshalJSON(json []byte) error {
	s := strings.Trim(string(json), "\"")
	switch s {
	case "definitional":
		*code = GroupMembershipBasisDefinitional
	case "enumerated":
		*code = GroupMembershipBasisEnumerated
	default:
		return fmt.Errorf("unknown GroupMembershipBasis code `%s`", s)
	}
	return nil
}
func (code GroupMembershipBasis) String() string {
	return code.Code()
}
func (code GroupMembershipBasis) Code() string {
	switch code {
	case GroupMembershipBasisDefinitional:
		return "definitional"
	case GroupMembershipBasisEnumerated:
		return "enumerated"
	}
	return "<unknown>"
}
func (code GroupMembershipBasis) Display() string {
	switch code {
	case GroupMembershipBasisDefinitional:
		return "Definitional"
	case GroupMembershipBasisEnumerated:
		return "Enumerated"
	}
	return "<unknown>"
}
func (code GroupMembershipBasis) Definition() string {
	switch code {
	case GroupMembershipBasisDefinitional:
		return "The Group.characteristics specified are both necessary and sufficient to determine membership. All entities that meet the criteria are considered to be members of the group, whether referenced by the group or not. If members are present, they are individuals that happen to be known as meeting the Group.characteristics. The list cannot be presumed to be complete."
	case GroupMembershipBasisEnumerated:
		return "The Group.characteristics are necessary but not sufficient to determine membership. Membership is determined by being listed as one of the Group.member."
	}
	return "<unknown>"
}
