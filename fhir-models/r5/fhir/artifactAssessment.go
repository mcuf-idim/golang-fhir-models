// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// ArtifactAssessment is documented here http://hl7.org/fhir/StructureDefinition/ArtifactAssessment
type ArtifactAssessment struct {
	Id                *string                           `bson:"id,omitempty" json:"id,omitempty"`
	Meta              *Meta                             `bson:"meta,omitempty" json:"meta,omitempty"`
	ImplicitRules     *string                           `bson:"implicitRules,omitempty" json:"implicitRules,omitempty"`
	Language          *string                           `bson:"language,omitempty" json:"language,omitempty"`
	Text              *Narrative                        `bson:"text,omitempty" json:"text,omitempty"`
	Extension         []Extension                       `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension                       `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Identifier        []Identifier                      `bson:"identifier,omitempty" json:"identifier,omitempty"`
	Title             *string                           `bson:"title,omitempty" json:"title,omitempty"`
	CiteAsReference   *Reference                        `bson:"citeAsReference,omitempty" json:"citeAsReference,omitempty"`
	CiteAsMarkdown    *string                           `bson:"citeAsMarkdown,omitempty" json:"citeAsMarkdown,omitempty"`
	Date              *string                           `bson:"date,omitempty" json:"date,omitempty"`
	Copyright         *string                           `bson:"copyright,omitempty" json:"copyright,omitempty"`
	ApprovalDate      *string                           `bson:"approvalDate,omitempty" json:"approvalDate,omitempty"`
	LastReviewDate    *string                           `bson:"lastReviewDate,omitempty" json:"lastReviewDate,omitempty"`
	ArtifactReference Reference                         `bson:"artifactReference" json:"artifactReference"`
	ArtifactCanonical string                            `bson:"artifactCanonical" json:"artifactCanonical"`
	ArtifactUri       string                            `bson:"artifactUri" json:"artifactUri"`
	Content           []ArtifactAssessmentContent       `bson:"content,omitempty" json:"content,omitempty"`
	WorkflowStatus    *ArtifactAssessmentWorkflowStatus `bson:"workflowStatus,omitempty" json:"workflowStatus,omitempty"`
	Disposition       *ArtifactAssessmentDisposition    `bson:"disposition,omitempty" json:"disposition,omitempty"`
}
type ArtifactAssessmentContent struct {
	Id                *string                            `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension                        `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension                        `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	InformationType   *ArtifactAssessmentInformationType `bson:"informationType,omitempty" json:"informationType,omitempty"`
	Summary           *string                            `bson:"summary,omitempty" json:"summary,omitempty"`
	Type              *CodeableConcept                   `bson:"type,omitempty" json:"type,omitempty"`
	Classifier        []CodeableConcept                  `bson:"classifier,omitempty" json:"classifier,omitempty"`
	Quantity          *Quantity                          `bson:"quantity,omitempty" json:"quantity,omitempty"`
	Author            *Reference                         `bson:"author,omitempty" json:"author,omitempty"`
	Path              []string                           `bson:"path,omitempty" json:"path,omitempty"`
	RelatedArtifact   []RelatedArtifact                  `bson:"relatedArtifact,omitempty" json:"relatedArtifact,omitempty"`
	FreeToShare       *bool                              `bson:"freeToShare,omitempty" json:"freeToShare,omitempty"`
	Component         []ArtifactAssessmentContent        `bson:"component,omitempty" json:"component,omitempty"`
}
type OtherArtifactAssessment ArtifactAssessment

// MarshalJSON marshals the given ArtifactAssessment as JSON into a byte slice
func (r ArtifactAssessment) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherArtifactAssessment
		ResourceType string `json:"resourceType"`
	}{
		OtherArtifactAssessment: OtherArtifactAssessment(r),
		ResourceType:            "ArtifactAssessment",
	})
}

// UnmarshalArtifactAssessment unmarshals a ArtifactAssessment.
func UnmarshalArtifactAssessment(b []byte) (ArtifactAssessment, error) {
	var artifactAssessment ArtifactAssessment
	if err := json.Unmarshal(b, &artifactAssessment); err != nil {
		return artifactAssessment, err
	}
	return artifactAssessment, nil
}
