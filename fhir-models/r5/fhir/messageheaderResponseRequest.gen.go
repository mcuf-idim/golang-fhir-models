// Copyright 2024 Medical Center University Freiburg
// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import (
	"encoding/json"
	"fmt"
	"strings"
)

// THIS FILE IS GENERATED BY https://github.com/mcuf-idim/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// MessageheaderResponseRequest is documented here http://hl7.org/fhir/ValueSet/messageheader-response-request
type MessageheaderResponseRequest int

const (
	MessageheaderResponseRequestAlways MessageheaderResponseRequest = iota
	MessageheaderResponseRequestOnError
	MessageheaderResponseRequestNever
	MessageheaderResponseRequestOnSuccess
)

func (code MessageheaderResponseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(code.Code())
}
func (code *MessageheaderResponseRequest) UnmarshalJSON(json []byte) error {
	s := strings.Trim(string(json), "\"")
	switch s {
	case "always":
		*code = MessageheaderResponseRequestAlways
	case "on-error":
		*code = MessageheaderResponseRequestOnError
	case "never":
		*code = MessageheaderResponseRequestNever
	case "on-success":
		*code = MessageheaderResponseRequestOnSuccess
	default:
		return fmt.Errorf("unknown MessageheaderResponseRequest code `%s`", s)
	}
	return nil
}
func (code MessageheaderResponseRequest) String() string {
	return code.Code()
}
func (code MessageheaderResponseRequest) Code() string {
	switch code {
	case MessageheaderResponseRequestAlways:
		return "always"
	case MessageheaderResponseRequestOnError:
		return "on-error"
	case MessageheaderResponseRequestNever:
		return "never"
	case MessageheaderResponseRequestOnSuccess:
		return "on-success"
	}
	return "<unknown>"
}
func (code MessageheaderResponseRequest) Display() string {
	switch code {
	case MessageheaderResponseRequestAlways:
		return "Always"
	case MessageheaderResponseRequestOnError:
		return "Error/reject conditions only"
	case MessageheaderResponseRequestNever:
		return "Never"
	case MessageheaderResponseRequestOnSuccess:
		return "Successful completion only"
	}
	return "<unknown>"
}
func (code MessageheaderResponseRequest) Definition() string {
	switch code {
	case MessageheaderResponseRequestAlways:
		return "initiator expects a response for this message."
	case MessageheaderResponseRequestOnError:
		return "initiator expects a response only if in error."
	case MessageheaderResponseRequestNever:
		return "initiator does not expect a response."
	case MessageheaderResponseRequestOnSuccess:
		return "initiator expects a response only if successful."
	}
	return "<unknown>"
}
