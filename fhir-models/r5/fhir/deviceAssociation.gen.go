// Copyright 2024 Medical Center University Freiburg
// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/mcuf-idim/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// DeviceAssociation is documented here http://hl7.org/fhir/StructureDefinition/DeviceAssociation
type DeviceAssociation struct {
	Id                *string                      `bson:"id,omitempty" json:"id,omitempty"`
	Meta              *Meta                        `bson:"meta,omitempty" json:"meta,omitempty"`
	ImplicitRules     *string                      `bson:"implicitRules,omitempty" json:"implicitRules,omitempty"`
	Language          *string                      `bson:"language,omitempty" json:"language,omitempty"`
	Text              *Narrative                   `bson:"text,omitempty" json:"text,omitempty"`
	Contained         []json.RawMessage            `bson:"contained,omitempty" json:"contained,omitempty"`
	Extension         []Extension                  `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension                  `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Identifier        []Identifier                 `bson:"identifier,omitempty" json:"identifier,omitempty"`
	Device            Reference                    `bson:"device" json:"device"`
	Category          []CodeableConcept            `bson:"category,omitempty" json:"category,omitempty"`
	Status            CodeableConcept              `bson:"status" json:"status"`
	StatusReason      []CodeableConcept            `bson:"statusReason,omitempty" json:"statusReason,omitempty"`
	Subject           *Reference                   `bson:"subject,omitempty" json:"subject,omitempty"`
	BodyStructure     *Reference                   `bson:"bodyStructure,omitempty" json:"bodyStructure,omitempty"`
	Period            *Period                      `bson:"period,omitempty" json:"period,omitempty"`
	Operation         []DeviceAssociationOperation `bson:"operation,omitempty" json:"operation,omitempty"`
}

func (r DeviceAssociation) ContainedResources() []json.RawMessage {
	return r.Contained
}

type DeviceAssociationOperation struct {
	Id                *string         `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension     `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension     `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Status            CodeableConcept `bson:"status" json:"status"`
	Operator          []Reference     `bson:"operator,omitempty" json:"operator,omitempty"`
	Period            *Period         `bson:"period,omitempty" json:"period,omitempty"`
}
type OtherDeviceAssociation DeviceAssociation

// MarshalJSON marshals the given DeviceAssociation as JSON into a byte slice
func (r DeviceAssociation) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherDeviceAssociation
		ResourceType string `json:"resourceType"`
	}{
		OtherDeviceAssociation: OtherDeviceAssociation(r),
		ResourceType:           "DeviceAssociation",
	})
}
func (r DeviceAssociation) ResourceType() string {
	return "DeviceAssociation"
}

// UnmarshalDeviceAssociation unmarshals a DeviceAssociation.
func UnmarshalDeviceAssociation(b []byte) (DeviceAssociation, error) {
	var deviceAssociation DeviceAssociation
	if err := json.Unmarshal(b, &deviceAssociation); err != nil {
		return deviceAssociation, err
	}
	return deviceAssociation, nil
}
