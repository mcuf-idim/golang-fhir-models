// Copyright 2024 Medical Center University Freiburg
// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/mcuf-idim/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// AdverseEvent is documented here http://hl7.org/fhir/StructureDefinition/AdverseEvent
type AdverseEvent struct {
	Id                      *string                          `bson:"id,omitempty" json:"id,omitempty"`
	Meta                    *Meta                            `bson:"meta,omitempty" json:"meta,omitempty"`
	ImplicitRules           *string                          `bson:"implicitRules,omitempty" json:"implicitRules,omitempty"`
	Language                *string                          `bson:"language,omitempty" json:"language,omitempty"`
	Text                    *Narrative                       `bson:"text,omitempty" json:"text,omitempty"`
	Contained               []json.RawMessage                `bson:"contained,omitempty" json:"contained,omitempty"`
	Extension               []Extension                      `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension       []Extension                      `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Identifier              []Identifier                     `bson:"identifier,omitempty" json:"identifier,omitempty"`
	Status                  AdverseEventStatus               `bson:"status" json:"status"`
	Actuality               AdverseEventActuality            `bson:"actuality" json:"actuality"`
	Category                []CodeableConcept                `bson:"category,omitempty" json:"category,omitempty"`
	Code                    *CodeableConcept                 `bson:"code,omitempty" json:"code,omitempty"`
	Subject                 Reference                        `bson:"subject" json:"subject"`
	Encounter               *Reference                       `bson:"encounter,omitempty" json:"encounter,omitempty"`
	OccurrenceDateTime      *string                          `bson:"occurrenceDateTime,omitempty" json:"occurrenceDateTime,omitempty"`
	OccurrencePeriod        *Period                          `bson:"occurrencePeriod,omitempty" json:"occurrencePeriod,omitempty"`
	OccurrenceTiming        *Timing                          `bson:"occurrenceTiming,omitempty" json:"occurrenceTiming,omitempty"`
	Detected                *string                          `bson:"detected,omitempty" json:"detected,omitempty"`
	RecordedDate            *string                          `bson:"recordedDate,omitempty" json:"recordedDate,omitempty"`
	ResultingEffect         []Reference                      `bson:"resultingEffect,omitempty" json:"resultingEffect,omitempty"`
	Location                *Reference                       `bson:"location,omitempty" json:"location,omitempty"`
	Seriousness             *CodeableConcept                 `bson:"seriousness,omitempty" json:"seriousness,omitempty"`
	Outcome                 []CodeableConcept                `bson:"outcome,omitempty" json:"outcome,omitempty"`
	Recorder                *Reference                       `bson:"recorder,omitempty" json:"recorder,omitempty"`
	Participant             []AdverseEventParticipant        `bson:"participant,omitempty" json:"participant,omitempty"`
	Study                   []Reference                      `bson:"study,omitempty" json:"study,omitempty"`
	ExpectedInResearchStudy *bool                            `bson:"expectedInResearchStudy,omitempty" json:"expectedInResearchStudy,omitempty"`
	SuspectEntity           []AdverseEventSuspectEntity      `bson:"suspectEntity,omitempty" json:"suspectEntity,omitempty"`
	ContributingFactor      []AdverseEventContributingFactor `bson:"contributingFactor,omitempty" json:"contributingFactor,omitempty"`
	PreventiveAction        []AdverseEventPreventiveAction   `bson:"preventiveAction,omitempty" json:"preventiveAction,omitempty"`
	MitigatingAction        []AdverseEventMitigatingAction   `bson:"mitigatingAction,omitempty" json:"mitigatingAction,omitempty"`
	SupportingInfo          []AdverseEventSupportingInfo     `bson:"supportingInfo,omitempty" json:"supportingInfo,omitempty"`
	Note                    []Annotation                     `bson:"note,omitempty" json:"note,omitempty"`
}

func (r AdverseEvent) ContainedResources() []json.RawMessage {
	return r.Contained
}

type AdverseEventParticipant struct {
	Id                *string          `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension      `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension      `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Function          *CodeableConcept `bson:"function,omitempty" json:"function,omitempty"`
	Actor             Reference        `bson:"actor" json:"actor"`
}
type AdverseEventSuspectEntity struct {
	Id                      *string                             `bson:"id,omitempty" json:"id,omitempty"`
	Extension               []Extension                         `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension       []Extension                         `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	InstanceCodeableConcept CodeableConcept                     `bson:"instanceCodeableConcept" json:"instanceCodeableConcept"`
	InstanceReference       Reference                           `bson:"instanceReference" json:"instanceReference"`
	Causality               *AdverseEventSuspectEntityCausality `bson:"causality,omitempty" json:"causality,omitempty"`
}
type AdverseEventSuspectEntityCausality struct {
	Id                *string          `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension      `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension      `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	AssessmentMethod  *CodeableConcept `bson:"assessmentMethod,omitempty" json:"assessmentMethod,omitempty"`
	EntityRelatedness *CodeableConcept `bson:"entityRelatedness,omitempty" json:"entityRelatedness,omitempty"`
	Author            *Reference       `bson:"author,omitempty" json:"author,omitempty"`
}
type AdverseEventContributingFactor struct {
	Id                  *string         `bson:"id,omitempty" json:"id,omitempty"`
	Extension           []Extension     `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension   []Extension     `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	ItemReference       Reference       `bson:"itemReference" json:"itemReference"`
	ItemCodeableConcept CodeableConcept `bson:"itemCodeableConcept" json:"itemCodeableConcept"`
}
type AdverseEventPreventiveAction struct {
	Id                  *string         `bson:"id,omitempty" json:"id,omitempty"`
	Extension           []Extension     `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension   []Extension     `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	ItemReference       Reference       `bson:"itemReference" json:"itemReference"`
	ItemCodeableConcept CodeableConcept `bson:"itemCodeableConcept" json:"itemCodeableConcept"`
}
type AdverseEventMitigatingAction struct {
	Id                  *string         `bson:"id,omitempty" json:"id,omitempty"`
	Extension           []Extension     `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension   []Extension     `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	ItemReference       Reference       `bson:"itemReference" json:"itemReference"`
	ItemCodeableConcept CodeableConcept `bson:"itemCodeableConcept" json:"itemCodeableConcept"`
}
type AdverseEventSupportingInfo struct {
	Id                  *string         `bson:"id,omitempty" json:"id,omitempty"`
	Extension           []Extension     `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension   []Extension     `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	ItemReference       Reference       `bson:"itemReference" json:"itemReference"`
	ItemCodeableConcept CodeableConcept `bson:"itemCodeableConcept" json:"itemCodeableConcept"`
}
type OtherAdverseEvent AdverseEvent

// MarshalJSON marshals the given AdverseEvent as JSON into a byte slice
func (r AdverseEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherAdverseEvent
		ResourceType string `json:"resourceType"`
	}{
		OtherAdverseEvent: OtherAdverseEvent(r),
		ResourceType:      "AdverseEvent",
	})
}
func (r AdverseEvent) ResourceType() string {
	return "AdverseEvent"
}

// UnmarshalAdverseEvent unmarshals a AdverseEvent.
func UnmarshalAdverseEvent(b []byte) (AdverseEvent, error) {
	var adverseEvent AdverseEvent
	if err := json.Unmarshal(b, &adverseEvent); err != nil {
		return adverseEvent, err
	}
	return adverseEvent, nil
}
