// Copyright 2024 Medical Center University Freiburg
// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import (
	"encoding/json"
	"fmt"
	"strings"
)

// THIS FILE IS GENERATED BY https://github.com/mcuf-idim/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// ConformanceExpectation is documented here http://hl7.org/fhir/ValueSet/conformance-expectation
type ConformanceExpectation int

const (
	ConformanceExpectationSHALL ConformanceExpectation = iota
	ConformanceExpectationSHOULD
	ConformanceExpectationMAY
	ConformanceExpectationSHOULDNOT
)

func (code ConformanceExpectation) MarshalJSON() ([]byte, error) {
	return json.Marshal(code.Code())
}
func (code *ConformanceExpectation) UnmarshalJSON(json []byte) error {
	s := strings.Trim(string(json), "\"")
	switch s {
	case "SHALL":
		*code = ConformanceExpectationSHALL
	case "SHOULD":
		*code = ConformanceExpectationSHOULD
	case "MAY":
		*code = ConformanceExpectationMAY
	case "SHOULD-NOT":
		*code = ConformanceExpectationSHOULDNOT
	default:
		return fmt.Errorf("unknown ConformanceExpectation code `%s`", s)
	}
	return nil
}
func (code ConformanceExpectation) String() string {
	return code.Code()
}
func (code ConformanceExpectation) Code() string {
	switch code {
	case ConformanceExpectationSHALL:
		return "SHALL"
	case ConformanceExpectationSHOULD:
		return "SHOULD"
	case ConformanceExpectationMAY:
		return "MAY"
	case ConformanceExpectationSHOULDNOT:
		return "SHOULD-NOT"
	}
	return "<unknown>"
}
func (code ConformanceExpectation) Display() string {
	switch code {
	case ConformanceExpectationSHALL:
		return "SHALL"
	case ConformanceExpectationSHOULD:
		return "SHOULD"
	case ConformanceExpectationMAY:
		return "MAY"
	case ConformanceExpectationSHOULDNOT:
		return "SHOULD-NOT"
	}
	return "<unknown>"
}
func (code ConformanceExpectation) Definition() string {
	switch code {
	case ConformanceExpectationSHALL:
		return "Support for the specified capability is required to be considered conformant."
	case ConformanceExpectationSHOULD:
		return "Support for the specified capability is strongly encouraged, and failure to support it should only occur after careful consideration."
	case ConformanceExpectationMAY:
		return "Support for the specified capability is not necessary to be considered conformant, and the requirement should be considered strictly optional."
	case ConformanceExpectationSHOULDNOT:
		return "Support for the specified capability is strongly discouraged and should occur only after careful consideration."
	}
	return "<unknown>"
}
