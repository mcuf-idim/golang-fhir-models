// Copyright 2024 Medical Center University Freiburg
// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/mcuf-idim/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// MolecularSequence is documented here http://hl7.org/fhir/StructureDefinition/MolecularSequence
type MolecularSequence struct {
	Id                *string                     `bson:"id,omitempty" json:"id,omitempty"`
	Meta              *Meta                       `bson:"meta,omitempty" json:"meta,omitempty"`
	ImplicitRules     *string                     `bson:"implicitRules,omitempty" json:"implicitRules,omitempty"`
	Language          *string                     `bson:"language,omitempty" json:"language,omitempty"`
	Text              *Narrative                  `bson:"text,omitempty" json:"text,omitempty"`
	Extension         []Extension                 `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension                 `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Identifier        []Identifier                `bson:"identifier,omitempty" json:"identifier,omitempty"`
	Type              *SequenceType               `bson:"type,omitempty" json:"type,omitempty"`
	Subject           *Reference                  `bson:"subject,omitempty" json:"subject,omitempty"`
	Focus             []Reference                 `bson:"focus,omitempty" json:"focus,omitempty"`
	Specimen          *Reference                  `bson:"specimen,omitempty" json:"specimen,omitempty"`
	Device            *Reference                  `bson:"device,omitempty" json:"device,omitempty"`
	Performer         *Reference                  `bson:"performer,omitempty" json:"performer,omitempty"`
	Literal           *string                     `bson:"literal,omitempty" json:"literal,omitempty"`
	Formatted         []Attachment                `bson:"formatted,omitempty" json:"formatted,omitempty"`
	Relative          []MolecularSequenceRelative `bson:"relative,omitempty" json:"relative,omitempty"`
}
type MolecularSequenceRelative struct {
	Id                *string                                    `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension                                `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension                                `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	CoordinateSystem  CodeableConcept                            `bson:"coordinateSystem" json:"coordinateSystem"`
	OrdinalPosition   *int                                       `bson:"ordinalPosition,omitempty" json:"ordinalPosition,omitempty"`
	SequenceRange     *Range                                     `bson:"sequenceRange,omitempty" json:"sequenceRange,omitempty"`
	StartingSequence  *MolecularSequenceRelativeStartingSequence `bson:"startingSequence,omitempty" json:"startingSequence,omitempty"`
	Edit              []MolecularSequenceRelativeEdit            `bson:"edit,omitempty" json:"edit,omitempty"`
}
type MolecularSequenceRelativeStartingSequence struct {
	Id                      *string          `bson:"id,omitempty" json:"id,omitempty"`
	Extension               []Extension      `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension       []Extension      `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	GenomeAssembly          *CodeableConcept `bson:"genomeAssembly,omitempty" json:"genomeAssembly,omitempty"`
	Chromosome              *CodeableConcept `bson:"chromosome,omitempty" json:"chromosome,omitempty"`
	SequenceCodeableConcept *CodeableConcept `bson:"sequenceCodeableConcept,omitempty" json:"sequenceCodeableConcept,omitempty"`
	SequenceString          *string          `bson:"sequenceString,omitempty" json:"sequenceString,omitempty"`
	SequenceReference       *Reference       `bson:"sequenceReference,omitempty" json:"sequenceReference,omitempty"`
	WindowStart             *int             `bson:"windowStart,omitempty" json:"windowStart,omitempty"`
	WindowEnd               *int             `bson:"windowEnd,omitempty" json:"windowEnd,omitempty"`
	Orientation             *OrientationType `bson:"orientation,omitempty" json:"orientation,omitempty"`
	Strand                  *StrandType      `bson:"strand,omitempty" json:"strand,omitempty"`
}
type MolecularSequenceRelativeEdit struct {
	Id                  *string     `bson:"id,omitempty" json:"id,omitempty"`
	Extension           []Extension `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension   []Extension `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Start               *int        `bson:"start,omitempty" json:"start,omitempty"`
	End                 *int        `bson:"end,omitempty" json:"end,omitempty"`
	ReplacementSequence *string     `bson:"replacementSequence,omitempty" json:"replacementSequence,omitempty"`
	ReplacedSequence    *string     `bson:"replacedSequence,omitempty" json:"replacedSequence,omitempty"`
}
type OtherMolecularSequence MolecularSequence

// MarshalJSON marshals the given MolecularSequence as JSON into a byte slice
func (r MolecularSequence) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherMolecularSequence
		ResourceType string `json:"resourceType"`
	}{
		OtherMolecularSequence: OtherMolecularSequence(r),
		ResourceType:           "MolecularSequence",
	})
}

// UnmarshalMolecularSequence unmarshals a MolecularSequence.
func UnmarshalMolecularSequence(b []byte) (MolecularSequence, error) {
	var molecularSequence MolecularSequence
	if err := json.Unmarshal(b, &molecularSequence); err != nil {
		return molecularSequence, err
	}
	return molecularSequence, nil
}
