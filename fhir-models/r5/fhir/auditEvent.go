// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// AuditEvent is documented here http://hl7.org/fhir/StructureDefinition/AuditEvent
type AuditEvent struct {
	Id                *string             `bson:"id,omitempty" json:"id,omitempty"`
	Meta              *Meta               `bson:"meta,omitempty" json:"meta,omitempty"`
	ImplicitRules     *string             `bson:"implicitRules,omitempty" json:"implicitRules,omitempty"`
	Language          *string             `bson:"language,omitempty" json:"language,omitempty"`
	Text              *Narrative          `bson:"text,omitempty" json:"text,omitempty"`
	Extension         []Extension         `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension         `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Category          []CodeableConcept   `bson:"category,omitempty" json:"category,omitempty"`
	Code              CodeableConcept     `bson:"code" json:"code"`
	Action            *AuditEventAction   `bson:"action,omitempty" json:"action,omitempty"`
	Severity          *AuditEventSeverity `bson:"severity,omitempty" json:"severity,omitempty"`
	OccurredPeriod    *Period             `bson:"occurredPeriod,omitempty" json:"occurredPeriod,omitempty"`
	OccurredDateTime  *string             `bson:"occurredDateTime,omitempty" json:"occurredDateTime,omitempty"`
	Recorded          string              `bson:"recorded" json:"recorded"`
	Outcome           *AuditEventOutcome  `bson:"outcome,omitempty" json:"outcome,omitempty"`
	Authorization     []CodeableConcept   `bson:"authorization,omitempty" json:"authorization,omitempty"`
	BasedOn           []Reference         `bson:"basedOn,omitempty" json:"basedOn,omitempty"`
	Patient           *Reference          `bson:"patient,omitempty" json:"patient,omitempty"`
	Encounter         *Reference          `bson:"encounter,omitempty" json:"encounter,omitempty"`
	Agent             []AuditEventAgent   `bson:"agent" json:"agent"`
	Source            AuditEventSource    `bson:"source" json:"source"`
	Entity            []AuditEventEntity  `bson:"entity,omitempty" json:"entity,omitempty"`
}
type AuditEventOutcome struct {
	Id                *string           `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension       `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension       `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Code              Coding            `bson:"code" json:"code"`
	Detail            []CodeableConcept `bson:"detail,omitempty" json:"detail,omitempty"`
}
type AuditEventAgent struct {
	Id                *string           `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension       `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension       `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Type              *CodeableConcept  `bson:"type,omitempty" json:"type,omitempty"`
	Role              []CodeableConcept `bson:"role,omitempty" json:"role,omitempty"`
	Who               Reference         `bson:"who" json:"who"`
	Requestor         *bool             `bson:"requestor,omitempty" json:"requestor,omitempty"`
	Location          *Reference        `bson:"location,omitempty" json:"location,omitempty"`
	Policy            []string          `bson:"policy,omitempty" json:"policy,omitempty"`
	NetworkReference  *Reference        `bson:"networkReference,omitempty" json:"networkReference,omitempty"`
	NetworkUri        *string           `bson:"networkUri,omitempty" json:"networkUri,omitempty"`
	NetworkString     *string           `bson:"networkString,omitempty" json:"networkString,omitempty"`
	Authorization     []CodeableConcept `bson:"authorization,omitempty" json:"authorization,omitempty"`
}
type AuditEventSource struct {
	Id                *string           `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension       `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension       `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Site              *Reference        `bson:"site,omitempty" json:"site,omitempty"`
	Observer          Reference         `bson:"observer" json:"observer"`
	Type              []CodeableConcept `bson:"type,omitempty" json:"type,omitempty"`
}
type AuditEventEntity struct {
	Id                *string                  `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension              `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension              `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	What              *Reference               `bson:"what,omitempty" json:"what,omitempty"`
	Role              *CodeableConcept         `bson:"role,omitempty" json:"role,omitempty"`
	SecurityLabel     []CodeableConcept        `bson:"securityLabel,omitempty" json:"securityLabel,omitempty"`
	Query             *string                  `bson:"query,omitempty" json:"query,omitempty"`
	Detail            []AuditEventEntityDetail `bson:"detail,omitempty" json:"detail,omitempty"`
	Agent             []AuditEventAgent        `bson:"agent,omitempty" json:"agent,omitempty"`
}
type AuditEventEntityDetail struct {
	Id                   *string         `bson:"id,omitempty" json:"id,omitempty"`
	Extension            []Extension     `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension    []Extension     `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Type                 CodeableConcept `bson:"type" json:"type"`
	ValueQuantity        Quantity        `bson:"valueQuantity" json:"valueQuantity"`
	ValueCodeableConcept CodeableConcept `bson:"valueCodeableConcept" json:"valueCodeableConcept"`
	ValueString          string          `bson:"valueString" json:"valueString"`
	ValueBoolean         bool            `bson:"valueBoolean" json:"valueBoolean"`
	ValueInteger         int             `bson:"valueInteger" json:"valueInteger"`
	ValueRange           Range           `bson:"valueRange" json:"valueRange"`
	ValueRatio           Ratio           `bson:"valueRatio" json:"valueRatio"`
	ValueTime            string          `bson:"valueTime" json:"valueTime"`
	ValueDateTime        string          `bson:"valueDateTime" json:"valueDateTime"`
	ValuePeriod          Period          `bson:"valuePeriod" json:"valuePeriod"`
	ValueBase64Binary    string          `bson:"valueBase64Binary" json:"valueBase64Binary"`
}
type OtherAuditEvent AuditEvent

// MarshalJSON marshals the given AuditEvent as JSON into a byte slice
func (r AuditEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherAuditEvent
		ResourceType string `json:"resourceType"`
	}{
		OtherAuditEvent: OtherAuditEvent(r),
		ResourceType:    "AuditEvent",
	})
}

// UnmarshalAuditEvent unmarshals a AuditEvent.
func UnmarshalAuditEvent(b []byte) (AuditEvent, error) {
	var auditEvent AuditEvent
	if err := json.Unmarshal(b, &auditEvent); err != nil {
		return auditEvent, err
	}
	return auditEvent, nil
}
