// Copyright 2024 Medical Center University Freiburg
// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import (
	"encoding/json"
	"fmt"
	"strings"
)

// THIS FILE IS GENERATED BY https://github.com/mcuf-idim/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// ClinicalUseDefinitionType is documented here http://hl7.org/fhir/ValueSet/clinical-use-definition-type
type ClinicalUseDefinitionType int

const (
	ClinicalUseDefinitionTypeIndication ClinicalUseDefinitionType = iota
	ClinicalUseDefinitionTypeContraindication
	ClinicalUseDefinitionTypeInteraction
	ClinicalUseDefinitionTypeUndesirableEffect
	ClinicalUseDefinitionTypeWarning
)

func (code ClinicalUseDefinitionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(code.Code())
}
func (code *ClinicalUseDefinitionType) UnmarshalJSON(json []byte) error {
	s := strings.Trim(string(json), "\"")
	switch s {
	case "indication":
		*code = ClinicalUseDefinitionTypeIndication
	case "contraindication":
		*code = ClinicalUseDefinitionTypeContraindication
	case "interaction":
		*code = ClinicalUseDefinitionTypeInteraction
	case "undesirable-effect":
		*code = ClinicalUseDefinitionTypeUndesirableEffect
	case "warning":
		*code = ClinicalUseDefinitionTypeWarning
	default:
		return fmt.Errorf("unknown ClinicalUseDefinitionType code `%s`", s)
	}
	return nil
}
func (code ClinicalUseDefinitionType) String() string {
	return code.Code()
}
func (code ClinicalUseDefinitionType) Code() string {
	switch code {
	case ClinicalUseDefinitionTypeIndication:
		return "indication"
	case ClinicalUseDefinitionTypeContraindication:
		return "contraindication"
	case ClinicalUseDefinitionTypeInteraction:
		return "interaction"
	case ClinicalUseDefinitionTypeUndesirableEffect:
		return "undesirable-effect"
	case ClinicalUseDefinitionTypeWarning:
		return "warning"
	}
	return "<unknown>"
}
func (code ClinicalUseDefinitionType) Display() string {
	switch code {
	case ClinicalUseDefinitionTypeIndication:
		return "Indication"
	case ClinicalUseDefinitionTypeContraindication:
		return "Contraindication"
	case ClinicalUseDefinitionTypeInteraction:
		return "Interaction"
	case ClinicalUseDefinitionTypeUndesirableEffect:
		return "Undesirable Effect"
	case ClinicalUseDefinitionTypeWarning:
		return "Warning"
	}
	return "<unknown>"
}
func (code ClinicalUseDefinitionType) Definition() string {
	switch code {
	case ClinicalUseDefinitionTypeIndication:
		return "A reason for giving the medication."
	case ClinicalUseDefinitionTypeContraindication:
		return "A reason for not giving the medication."
	case ClinicalUseDefinitionTypeInteraction:
		return "Interactions between the medication and other substances."
	case ClinicalUseDefinitionTypeUndesirableEffect:
		return "Side effects or adverse effects associated with the medication."
	case ClinicalUseDefinitionTypeWarning:
		return "A general warning or issue that is not specifically one of the other types."
	}
	return "<unknown>"
}
