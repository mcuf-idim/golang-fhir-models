// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import (
	"encoding/json"
	"fmt"
	"strings"
)

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// VerificationResultStatus is documented here http://hl7.org/fhir/ValueSet/verificationresult-status
type VerificationResultStatus int

const (
	VerificationResultStatusAttested VerificationResultStatus = iota
	VerificationResultStatusValidated
	VerificationResultStatusInProcess
	VerificationResultStatusReqRevalid
	VerificationResultStatusValFail
	VerificationResultStatusRevalFail
	VerificationResultStatusEnteredInError
)

func (code VerificationResultStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(code.Code())
}
func (code *VerificationResultStatus) UnmarshalJSON(json []byte) error {
	s := strings.Trim(string(json), "\"")
	switch s {
	case "attested":
		*code = VerificationResultStatusAttested
	case "validated":
		*code = VerificationResultStatusValidated
	case "in-process":
		*code = VerificationResultStatusInProcess
	case "req-revalid":
		*code = VerificationResultStatusReqRevalid
	case "val-fail":
		*code = VerificationResultStatusValFail
	case "reval-fail":
		*code = VerificationResultStatusRevalFail
	case "entered-in-error":
		*code = VerificationResultStatusEnteredInError
	default:
		return fmt.Errorf("unknown VerificationResultStatus code `%s`", s)
	}
	return nil
}
func (code VerificationResultStatus) String() string {
	return code.Code()
}
func (code VerificationResultStatus) Code() string {
	switch code {
	case VerificationResultStatusAttested:
		return "attested"
	case VerificationResultStatusValidated:
		return "validated"
	case VerificationResultStatusInProcess:
		return "in-process"
	case VerificationResultStatusReqRevalid:
		return "req-revalid"
	case VerificationResultStatusValFail:
		return "val-fail"
	case VerificationResultStatusRevalFail:
		return "reval-fail"
	case VerificationResultStatusEnteredInError:
		return "entered-in-error"
	}
	return "<unknown>"
}
func (code VerificationResultStatus) Display() string {
	switch code {
	case VerificationResultStatusAttested:
		return "Attested"
	case VerificationResultStatusValidated:
		return "Validated"
	case VerificationResultStatusInProcess:
		return "In process"
	case VerificationResultStatusReqRevalid:
		return "Requires revalidation"
	case VerificationResultStatusValFail:
		return "Validation failed"
	case VerificationResultStatusRevalFail:
		return "Re-Validation failed"
	case VerificationResultStatusEnteredInError:
		return "Entered in Error"
	}
	return "<unknown>"
}
func (code VerificationResultStatus) Definition() string {
	switch code {
	case VerificationResultStatusAttested:
		return "***TODO***"
	case VerificationResultStatusValidated:
		return "***TODO***"
	case VerificationResultStatusInProcess:
		return "***TODO***"
	case VerificationResultStatusReqRevalid:
		return "***TODO***"
	case VerificationResultStatusValFail:
		return "***TODO***"
	case VerificationResultStatusRevalFail:
		return "***TODO***"
	case VerificationResultStatusEnteredInError:
		return "The VerificationResult record was created erroneously and is not appropriated for use."
	}
	return "<unknown>"
}
