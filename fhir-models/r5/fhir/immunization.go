// Copyright 2024 Medical Center University Freiburg
// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/mcuf-idim/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// Immunization is documented here http://hl7.org/fhir/StructureDefinition/Immunization
type Immunization struct {
	Id                    *string                          `bson:"id,omitempty" json:"id,omitempty"`
	Meta                  *Meta                            `bson:"meta,omitempty" json:"meta,omitempty"`
	ImplicitRules         *string                          `bson:"implicitRules,omitempty" json:"implicitRules,omitempty"`
	Language              *string                          `bson:"language,omitempty" json:"language,omitempty"`
	Text                  *Narrative                       `bson:"text,omitempty" json:"text,omitempty"`
	Extension             []Extension                      `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension     []Extension                      `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Identifier            []Identifier                     `bson:"identifier,omitempty" json:"identifier,omitempty"`
	BasedOn               []Reference                      `bson:"basedOn,omitempty" json:"basedOn,omitempty"`
	Status                ImmunizationStatusCodes          `bson:"status" json:"status"`
	StatusReason          *CodeableConcept                 `bson:"statusReason,omitempty" json:"statusReason,omitempty"`
	VaccineCode           CodeableConcept                  `bson:"vaccineCode" json:"vaccineCode"`
	AdministeredProduct   *CodeableReference               `bson:"administeredProduct,omitempty" json:"administeredProduct,omitempty"`
	Manufacturer          *CodeableReference               `bson:"manufacturer,omitempty" json:"manufacturer,omitempty"`
	LotNumber             *string                          `bson:"lotNumber,omitempty" json:"lotNumber,omitempty"`
	ExpirationDate        *string                          `bson:"expirationDate,omitempty" json:"expirationDate,omitempty"`
	Patient               Reference                        `bson:"patient" json:"patient"`
	Encounter             *Reference                       `bson:"encounter,omitempty" json:"encounter,omitempty"`
	SupportingInformation []Reference                      `bson:"supportingInformation,omitempty" json:"supportingInformation,omitempty"`
	OccurrenceDateTime    string                           `bson:"occurrenceDateTime" json:"occurrenceDateTime"`
	OccurrenceString      string                           `bson:"occurrenceString" json:"occurrenceString"`
	PrimarySource         *bool                            `bson:"primarySource,omitempty" json:"primarySource,omitempty"`
	InformationSource     *CodeableReference               `bson:"informationSource,omitempty" json:"informationSource,omitempty"`
	Location              *Reference                       `bson:"location,omitempty" json:"location,omitempty"`
	Site                  *CodeableConcept                 `bson:"site,omitempty" json:"site,omitempty"`
	Route                 *CodeableConcept                 `bson:"route,omitempty" json:"route,omitempty"`
	DoseQuantity          *Quantity                        `bson:"doseQuantity,omitempty" json:"doseQuantity,omitempty"`
	Performer             []ImmunizationPerformer          `bson:"performer,omitempty" json:"performer,omitempty"`
	Note                  []Annotation                     `bson:"note,omitempty" json:"note,omitempty"`
	Reason                []CodeableReference              `bson:"reason,omitempty" json:"reason,omitempty"`
	IsSubpotent           *bool                            `bson:"isSubpotent,omitempty" json:"isSubpotent,omitempty"`
	SubpotentReason       []CodeableConcept                `bson:"subpotentReason,omitempty" json:"subpotentReason,omitempty"`
	ProgramEligibility    []ImmunizationProgramEligibility `bson:"programEligibility,omitempty" json:"programEligibility,omitempty"`
	FundingSource         *CodeableConcept                 `bson:"fundingSource,omitempty" json:"fundingSource,omitempty"`
	Reaction              []ImmunizationReaction           `bson:"reaction,omitempty" json:"reaction,omitempty"`
	ProtocolApplied       []ImmunizationProtocolApplied    `bson:"protocolApplied,omitempty" json:"protocolApplied,omitempty"`
}
type ImmunizationPerformer struct {
	Id                *string          `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension      `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension      `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Function          *CodeableConcept `bson:"function,omitempty" json:"function,omitempty"`
	Actor             Reference        `bson:"actor" json:"actor"`
}
type ImmunizationProgramEligibility struct {
	Id                *string         `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension     `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension     `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Program           CodeableConcept `bson:"program" json:"program"`
	ProgramStatus     CodeableConcept `bson:"programStatus" json:"programStatus"`
}
type ImmunizationReaction struct {
	Id                *string            `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension        `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension        `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Date              *string            `bson:"date,omitempty" json:"date,omitempty"`
	Manifestation     *CodeableReference `bson:"manifestation,omitempty" json:"manifestation,omitempty"`
	Reported          *bool              `bson:"reported,omitempty" json:"reported,omitempty"`
}
type ImmunizationProtocolApplied struct {
	Id                *string           `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension       `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension       `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Series            *string           `bson:"series,omitempty" json:"series,omitempty"`
	Authority         *Reference        `bson:"authority,omitempty" json:"authority,omitempty"`
	TargetDisease     []CodeableConcept `bson:"targetDisease,omitempty" json:"targetDisease,omitempty"`
	DoseNumber        string            `bson:"doseNumber" json:"doseNumber"`
	SeriesDoses       *string           `bson:"seriesDoses,omitempty" json:"seriesDoses,omitempty"`
}
type OtherImmunization Immunization

// MarshalJSON marshals the given Immunization as JSON into a byte slice
func (r Immunization) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherImmunization
		ResourceType string `json:"resourceType"`
	}{
		OtherImmunization: OtherImmunization(r),
		ResourceType:      "Immunization",
	})
}

// UnmarshalImmunization unmarshals a Immunization.
func UnmarshalImmunization(b []byte) (Immunization, error) {
	var immunization Immunization
	if err := json.Unmarshal(b, &immunization); err != nil {
		return immunization, err
	}
	return immunization, nil
}
