// Copyright 2019 - 2022 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import (
	"encoding/json"
	"fmt"
	"strings"
)

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// EnrollmentOutcome is documented here http://hl7.org/fhir/ValueSet/enrollment-outcome
type EnrollmentOutcome int

const (
	EnrollmentOutcomeQueued EnrollmentOutcome = iota
	EnrollmentOutcomeComplete
	EnrollmentOutcomeError
	EnrollmentOutcomePartial
)

func (code EnrollmentOutcome) MarshalJSON() ([]byte, error) {
	return json.Marshal(code.Code())
}
func (code *EnrollmentOutcome) UnmarshalJSON(json []byte) error {
	s := strings.Trim(string(json), "\"")
	switch s {
	case "queued":
		*code = EnrollmentOutcomeQueued
	case "complete":
		*code = EnrollmentOutcomeComplete
	case "error":
		*code = EnrollmentOutcomeError
	case "partial":
		*code = EnrollmentOutcomePartial
	default:
		return fmt.Errorf("unknown EnrollmentOutcome code `%s`", s)
	}
	return nil
}
func (code EnrollmentOutcome) String() string {
	return code.Code()
}
func (code EnrollmentOutcome) Code() string {
	switch code {
	case EnrollmentOutcomeQueued:
		return "queued"
	case EnrollmentOutcomeComplete:
		return "complete"
	case EnrollmentOutcomeError:
		return "error"
	case EnrollmentOutcomePartial:
		return "partial"
	}
	return "<unknown>"
}
func (code EnrollmentOutcome) Display() string {
	switch code {
	case EnrollmentOutcomeQueued:
		return "Queued"
	case EnrollmentOutcomeComplete:
		return "Processing Complete"
	case EnrollmentOutcomeError:
		return "Error"
	case EnrollmentOutcomePartial:
		return "Partial Processing"
	}
	return "<unknown>"
}
func (code EnrollmentOutcome) Definition() string {
	switch code {
	case EnrollmentOutcomeQueued:
		return "The Claim/Pre-authorization/Pre-determination has been received but processing has not begun."
	case EnrollmentOutcomeComplete:
		return "The processing has completed without errors"
	case EnrollmentOutcomeError:
		return "One or more errors have been detected in the Claim"
	case EnrollmentOutcomePartial:
		return "No errors have been detected in the Claim and some of the adjudication has been performed."
	}
	return "<unknown>"
}
